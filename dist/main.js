/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$nil?', '$option?', '$include?', '$join', '$map', '$split', '$!=', '$to_s', '$each', '$constants', '$const_set', '$const_get', '$register_for', '$basebackend', '$outfilesuffix', '$filetype', '$node_name', '$empty?', '$send', '$extend', '$instance_eval', '$set_local_variables', '$converter', '$binding', '$has_role?', '$<<', '$freeze', '$content', '$[]=', '$-', '$attr', '$role', '$===', '$flatten', '$map!', '$to_proc', '$reject!', '$[]', '$*', '$reject', '$!', '$attr?', '$icon_uri', '$title?', '$title', '$captioned_title', '$media_uri', '$each_with_index', '$items', '$+', '$text', '$text?', '$blocks?', '$chomp', '$last', '$level', '$id', '$style', '$roles', '$compact', '$image_uri', '$list_marker_keyword', '$doctype', '$puts', '$context', '$to_sym', '$strip', '$sub_specialcharacters', '$start_with?', '$end_with?', '$zero?', '$select', '$html_tag', '$colspan', '$rowspan', '$to_i', '$embedded?', '$outline', '$doctitle', '$normalize_web_path', '$>=', '$coderay_stylesheet_data', '$instance', '$pygments_stylesheet_data', '$docinfo', '$notitle', '$has_header?', '$subtitle?', '$slice_text', '$header', '$subtitle', '$find_by', '$length', '$pop', '$author', '$to_boolean', '$footnotes?', '$footnotes', '$index', '$tr_s', '$fetch', '$references', '$size', '$first', '$role?', '$gsub', '$blocks', '$convert', '$local_variable_set']);
  
  (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Revealjs, self = $Revealjs = $module($base, 'Revealjs');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      nil
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Converter(){};
    var self = $Converter = $klass($base, $super, 'Converter', $Converter);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Converter_4, TMP_Converter_initialize_5, TMP_Converter_convert_6, TMP_Converter_admonition_8, TMP_Converter_audio_10, TMP_Converter_colist_14, TMP_Converter_dlist_22, TMP_Converter_example_24, TMP_Converter_floating_title_26, TMP_Converter_image_28, TMP_Converter_listing_30, TMP_Converter_literal_32, TMP_Converter_olist_35, TMP_Converter_open_37, TMP_Converter_page_break_39, TMP_Converter_paragraph_41, TMP_Converter_pass_43, TMP_Converter_preamble_45, TMP_Converter_quote_47, TMP_Converter_ruler_49, TMP_Converter_sidebar_51, TMP_Converter_stem_53, TMP_Converter_table_64, TMP_Converter_thematic_break_66, TMP_Converter_toc_68, TMP_Converter_ulist_71, TMP_Converter_verse_73, TMP_Converter_video_75, TMP_Converter_document_78, TMP_Converter_embedded_81, TMP_Converter_inline_anchor_83, TMP_Converter_inline_break_85, TMP_Converter_inline_button_87, TMP_Converter_inline_callout_89, TMP_Converter_inline_footnote_91, TMP_Converter_inline_image_93, TMP_Converter_inline_indexterm_95, TMP_Converter_inline_kbd_98, TMP_Converter_inline_menu_101, TMP_Converter_inline_quoted_103, TMP_Converter_section_110, TMP_Converter_set_local_variables_112;

    
    if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      } else {
      nil
    };
    (function($base, $parent_nesting) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Helpers_slice_text_2, TMP_Helpers_to_boolean_3;

      
      Opal.const_set($nesting[0], 'EOL', "\n");
      Opal.const_set($nesting[0], 'SliceHintRx', /  +/);
      
      Opal.defn(self, '$slice_text', TMP_Helpers_slice_text_2 = function $$slice_text(str, active) {
        var $a, $b, $c, TMP_1, self = this;

        if (active == null) {
          active = nil;
        }
        if ($truthy(($truthy($a = ($truthy($b = active) ? $b : ($truthy($c = active['$nil?']()) ? self['$option?']("slice") : $c))) ? str['$include?']("  ") : $a))) {
          return $send(str.$split(Opal.const_get_relative($nesting, 'SliceHintRx')), 'map', [], (TMP_1 = function(line){var self = TMP_1.$$s || this;
if (line == null) line = nil;
          return "" + "<span class=\"line\">" + (line) + "</span>"}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)).$join(Opal.const_get_relative($nesting, 'EOL'))
          } else {
          return str
        }
      }, TMP_Helpers_slice_text_2.$$arity = -2);
      
      Opal.defn(self, '$to_boolean', TMP_Helpers_to_boolean_3 = function $$to_boolean(val) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = val) ? val['$!=']("false") : $c)) ? val.$to_s()['$!=']("0") : $b)) ? $a : false)
      }, TMP_Helpers_to_boolean_3.$$arity = 1);
    })($nesting[0], $nesting);
    $send(Opal.const_get_relative($nesting, 'Helpers').$constants(), 'each', [], (TMP_Converter_4 = function(const$){var self = TMP_Converter_4.$$s || this;
if (const$ == null) const$ = nil;
    return self.$const_set(const$, Opal.const_get_relative($nesting, 'Helpers').$const_get(const$))}, TMP_Converter_4.$$s = self, TMP_Converter_4.$$arity = 1, TMP_Converter_4));
    self.$register_for("revealjs");
    
    Opal.defn(self, '$initialize', TMP_Converter_initialize_5 = function $$initialize(backend, opts) {
      var self = this, $iter = TMP_Converter_initialize_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if (opts == null) {
        opts = $hash2([], {});
      }
      if ($iter) TMP_Converter_initialize_5.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Converter_initialize_5, false), $zuper, $iter);
      self.$basebackend("html");
      self.$outfilesuffix(".html");
      return self.$filetype("html");
    }, TMP_Converter_initialize_5.$$arity = -2);
    
    Opal.defn(self, '$convert', TMP_Converter_convert_6 = function $$convert(node, transform, opts) {
      var $a, self = this, converter = nil;

      if (transform == null) {
        transform = nil;
      }
      if (opts == null) {
        opts = $hash2([], {});
      }
      
      transform = ($truthy($a = transform) ? $a : node.$node_name());
      converter = self;
      if ($truthy(opts['$empty?']())) {
        return converter.$send(transform, node)
        } else {
        return converter.$send(transform, node, opts)
      };
    }, TMP_Converter_convert_6.$$arity = -2);
    
    Opal.defn(self, '$admonition', TMP_Converter_admonition_8 = function $$admonition(node, opts) {
      var TMP_7, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_7 = function(){var self = TMP_7.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, icon_mapping = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;
        if (self.caption == null) self.caption = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = self['$has_role?']("aside")) ? $a : self['$has_role?']("speaker")))) {
          
          _buf['$<<']("<aside class=\"notes\">".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</aside>".$freeze());
          } else {
          
          _buf['$<<']("<div".$freeze());
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "admonitionblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = [self.$attr("name"), self.$role()];
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
            } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
          };
          
          $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
          _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("><table><tr><td class=\"icon\">".$freeze());
          if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            icon_mapping = Opal.const_get_relative($nesting, 'Hash')['$[]']("caution", "fire", "important", "exclamation-circle", "note", "info-circle", "tip", "lightbulb-o", "warning", "warning");
            _buf['$<<']("<i".$freeze());
            _temple_html_attributeremover2 = [];
            _slim_codeattributes3 = "" + "fa fa-" + (icon_mapping['$[]'](self.$attr("name")));
            if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
              
              _slim_codeattributes3 = _slim_codeattributes3.$flatten();
              $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
              } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
            };
            _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"".$freeze());
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"".$freeze());};
            _slim_codeattributes4 = self.caption;
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" title".$freeze())
                } else {
                
                _buf['$<<'](" title=\"".$freeze());
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("></i>".$freeze());
          } else if ($truthy(self.document['$attr?']("icons"))) {
            
            _buf['$<<']("<img".$freeze());
            _slim_codeattributes5 = self.$icon_uri(self.$attr("name"));
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" src".$freeze())
                } else {
                
                _buf['$<<'](" src=\"".$freeze());
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes6 = self.caption;
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" alt".$freeze())
                } else {
                
                _buf['$<<'](" alt=\"".$freeze());
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
            } else {
            
            _buf['$<<']("<div class=\"title\">".$freeze());
            _buf['$<<'](self.caption);
            _buf['$<<']("</div>".$freeze());
          };
          _buf['$<<']("</td><td class=\"content\">".$freeze());
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">".$freeze());
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>".$freeze());};
          _buf['$<<'](self.$content());
          _buf['$<<']("</td></tr></table></div>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7));
    }, TMP_Converter_admonition_8.$$arity = -2);
    
    Opal.defn(self, '$audio', TMP_Converter_audio_10 = function $$audio(node, opts) {
      var TMP_9, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_9 = function(){var self = TMP_9.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "audioblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<div class=\"content\"><audio".$freeze());
        _slim_codeattributes3 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" src".$freeze())
            } else {
            
            _buf['$<<'](" src=\"".$freeze());
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes4 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" autoplay".$freeze())
            } else {
            
            _buf['$<<'](" autoplay=\"".$freeze());
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes5 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" controls".$freeze())
            } else {
            
            _buf['$<<'](" controls=\"".$freeze());
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes6 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" loop".$freeze())
            } else {
            
            _buf['$<<'](" loop=\"".$freeze());
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">Your browser does not support the audio tag.</audio></div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9));
    }, TMP_Converter_audio_10.$$arity = -2);
    
    Opal.defn(self, '$colist', TMP_Converter_colist_14 = function $$colist(node, opts) {
      var TMP_11, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_11 = function(){var self = TMP_11.$$s || this, TMP_12, TMP_13, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, font_icons = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "colist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        if ($truthy(self.document['$attr?']("icons"))) {
          
          font_icons = self.document['$attr?']("icons", "font");
          _buf['$<<']("<table>".$freeze());
          $send(self.$items(), 'each_with_index', [], (TMP_12 = function(item, i){var self = TMP_12.$$s || this, num = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;
if (item == null) item = nil;if (i == null) i = nil;
          
            num = $rb_plus(i, 1);
            _buf['$<<']("<tr><td>".$freeze());
            if ($truthy(font_icons)) {
              
              _buf['$<<']("<i class=\"conum\"".$freeze());
              _slim_codeattributes3 = num;
              if ($truthy(_slim_codeattributes3)) {
                if (_slim_codeattributes3['$=='](true)) {
                  _buf['$<<'](" data-value".$freeze())
                  } else {
                  
                  _buf['$<<'](" data-value=\"".$freeze());
                  _buf['$<<'](_slim_codeattributes3);
                  _buf['$<<']("\"".$freeze());
                }};
              _buf['$<<']("></i><b>".$freeze());
              _buf['$<<'](num);
              _buf['$<<']("</b>".$freeze());
              } else {
              
              _buf['$<<']("<img".$freeze());
              _slim_codeattributes4 = self.$icon_uri("" + "callouts/" + (num));
              if ($truthy(_slim_codeattributes4)) {
                if (_slim_codeattributes4['$=='](true)) {
                  _buf['$<<'](" src".$freeze())
                  } else {
                  
                  _buf['$<<'](" src=\"".$freeze());
                  _buf['$<<'](_slim_codeattributes4);
                  _buf['$<<']("\"".$freeze());
                }};
              _slim_codeattributes5 = num;
              if ($truthy(_slim_codeattributes5)) {
                if (_slim_codeattributes5['$=='](true)) {
                  _buf['$<<'](" alt".$freeze())
                  } else {
                  
                  _buf['$<<'](" alt=\"".$freeze());
                  _buf['$<<'](_slim_codeattributes5);
                  _buf['$<<']("\"".$freeze());
                }};
              _buf['$<<'](">".$freeze());
            };
            _buf['$<<']("</td><td>".$freeze());
            _buf['$<<'](item.$text());
            return _buf['$<<']("</td></tr>".$freeze());}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12));
          _buf['$<<']("</table>".$freeze());
          } else {
          
          _buf['$<<']("<ol>".$freeze());
          $send(self.$items(), 'each', [], (TMP_13 = function(item){var self = TMP_13.$$s || this;
if (item == null) item = nil;
          
            _buf['$<<']("<li><p>".$freeze());
            _buf['$<<'](item.$text());
            return _buf['$<<']("</p></li>".$freeze());}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
          _buf['$<<']("</ol>".$freeze());
        };
        _buf['$<<']("</div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
    }, TMP_Converter_colist_14.$$arity = -2);
    
    Opal.defn(self, '$dlist', TMP_Converter_dlist_22 = function $$dlist(node, opts) {
      var TMP_15, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_15 = function(){var self = TMP_15.$$s || this, TMP_16, $a, TMP_18, TMP_20, _buf = nil, $case = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _temple_html_attributeremover4 = nil, _temple_html_attributemerger3 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.style;
        if ("qanda"['$===']($case)) {
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "qlist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = ["qanda", self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<ol>".$freeze());
        $send(self.$items(), 'each', [], (TMP_16 = function(questions, answer){var self = TMP_16.$$s || this, TMP_17;
if (questions == null) questions = nil;if (answer == null) answer = nil;
        
          _buf['$<<']("<li>".$freeze());
          $send([].concat(Opal.to_a(questions)), 'each', [], (TMP_17 = function(question){var self = TMP_17.$$s || this;
if (question == null) question = nil;
          
            _buf['$<<']("<p><em>".$freeze());
            _buf['$<<'](question.$text());
            return _buf['$<<']("</em></p>".$freeze());}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
          if ($truthy(answer['$nil?']())) {
            } else {
            
            if ($truthy(answer['$text?']())) {
              
              _buf['$<<']("<p>".$freeze());
              _buf['$<<'](answer.$text());
              _buf['$<<']("</p>".$freeze());};
            if ($truthy(answer['$blocks?']())) {
              _buf['$<<'](answer.$content())};
          };
          return _buf['$<<']("</li>".$freeze());}, TMP_16.$$s = self, TMP_16.$$arity = 2, TMP_16));
        _buf['$<<']("</ol></div>".$freeze());}
        else if ("horizontal"['$===']($case)) {
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover2 = [];
        _temple_html_attributemerger2 = [];
        
        $writer = [0, "hdlist"];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes3 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger2['$[]'](1), "")];
        $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes4 = self.id;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<table>".$freeze());
        if ($truthy(($truthy($a = self['$attr?']("labelwidth")) ? $a : self['$attr?']("itemwidth")))) {
          
          _buf['$<<']("<colgroup><col".$freeze());
          _slim_codeattributes5 = (function() {if ($truthy(self['$attr?']("labelwidth"))) {
            return "" + "width:" + (self.$attr("labelwidth").$chomp("%")) + "%;"
            } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" style".$freeze())
              } else {
              
              _buf['$<<'](" style=\"".$freeze());
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("><col".$freeze());
          _slim_codeattributes6 = (function() {if ($truthy(self['$attr?']("itemwidth"))) {
            return "" + "width:" + (self.$attr("itemwidth").$chomp("%")) + "%;"
            } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" style".$freeze())
              } else {
              
              _buf['$<<'](" style=\"".$freeze());
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("></colgroup>".$freeze());};
        $send(self.$items(), 'each', [], (TMP_18 = function(terms, dd){var self = TMP_18.$$s || this, TMP_19, _temple_html_attributeremover3 = nil, _slim_codeattributes7 = nil, last_term = nil;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          _buf['$<<']("<tr><td".$freeze());
          _temple_html_attributeremover3 = [];
          _slim_codeattributes7 = ["hdlist1", (function() {if ($truthy(self['$option?']("strong"))) {
            return "strong"
            } else {
            return nil
          }; return nil; })()];
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes7))) {
            
            _slim_codeattributes7 = _slim_codeattributes7.$flatten();
            $send(_slim_codeattributes7, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes7, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$to_s())
          };
          _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<'](">".$freeze());
          terms = [].concat(Opal.to_a(terms));
          last_term = terms.$last();
          $send(terms, 'each', [], (TMP_19 = function(dt){var self = TMP_19.$$s || this;
if (dt == null) dt = nil;
          
            _buf['$<<'](dt.$text());
            if ($truthy(dt['$!='](last_term))) {
              return _buf['$<<']("<br>".$freeze())
              } else {
              return nil
            };}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
          _buf['$<<']("</td><td class=\"hdlist2\">".$freeze());
          if ($truthy(dd['$nil?']())) {
            } else {
            
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>".$freeze());
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>".$freeze());};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
          };
          return _buf['$<<']("</td></tr>".$freeze());}, TMP_18.$$s = self, TMP_18.$$arity = 2, TMP_18));
        _buf['$<<']("</table></div>".$freeze());}
        else {
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover4 = [];
        _temple_html_attributemerger3 = [];
        
        $writer = [0, "dlist"];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes8 = [self.style, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes8))) {
          
          _slim_codeattributes8 = _slim_codeattributes8.$flatten();
          $send(_slim_codeattributes8, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes8, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger3['$[]'](1)['$<<'](_slim_codeattributes8.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger3['$[]'](1), "")];
        $send(_temple_html_attributemerger3, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover4['$<<']($send(_temple_html_attributemerger3, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover4 = $rb_times(_temple_html_attributeremover4, "");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes9 = self.id;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<dl>".$freeze());
        $send(self.$items(), 'each', [], (TMP_20 = function(terms, dd){var self = TMP_20.$$s || this, TMP_21;
if (terms == null) terms = nil;if (dd == null) dd = nil;
        
          $send([].concat(Opal.to_a(terms)), 'each', [], (TMP_21 = function(dt){var self = TMP_21.$$s || this, _temple_html_attributeremover5 = nil, _slim_codeattributes10 = nil;
            if (self.style == null) self.style = nil;
if (dt == null) dt = nil;
          
            _buf['$<<']("<dt".$freeze());
            _temple_html_attributeremover5 = [];
            _slim_codeattributes10 = (function() {if ($truthy(self.style)) {
              return nil
              } else {
              return "hdlist1"
            }; return nil; })();
            if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes10))) {
              
              _slim_codeattributes10 = _slim_codeattributes10.$flatten();
              $send(_slim_codeattributes10, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes10, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10.$join(" ").$to_s());
              } else {
              _temple_html_attributeremover5['$<<'](_slim_codeattributes10.$to_s())
            };
            _temple_html_attributeremover5 = $rb_times(_temple_html_attributeremover5, "");
            if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"".$freeze());
              _buf['$<<'](_temple_html_attributeremover5);
              _buf['$<<']("\"".$freeze());};
            _buf['$<<'](">".$freeze());
            _buf['$<<'](dt.$text());
            return _buf['$<<']("</dt>".$freeze());}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
          if ($truthy(dd['$nil?']())) {
            return nil
            } else {
            
            _buf['$<<']("<dd>".$freeze());
            if ($truthy(dd['$text?']())) {
              
              _buf['$<<']("<p>".$freeze());
              _buf['$<<'](dd.$text());
              _buf['$<<']("</p>".$freeze());};
            if ($truthy(dd['$blocks?']())) {
              _buf['$<<'](dd.$content())};
            return _buf['$<<']("</dd>".$freeze());
          };}, TMP_20.$$s = self, TMP_20.$$arity = 2, TMP_20));
        _buf['$<<']("</dl></div>".$freeze());};
        return (_buf = _buf.$join("".$freeze()));}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15));
    }, TMP_Converter_dlist_22.$$arity = -2);
    
    Opal.defn(self, '$example', TMP_Converter_example_24 = function $$example(node, opts) {
      var TMP_23, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_23 = function(){var self = TMP_23.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "exampleblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<div class=\"content\">".$freeze());
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23));
    }, TMP_Converter_example_24.$$arity = -2);
    
    Opal.defn(self, '$floating_title', TMP_Converter_floating_title_26 = function $$floating_title(node, opts) {
      var TMP_25, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_25 = function(){var self = TMP_25.$$s || this, _buf = nil, _slim_htag_filter1 = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _slim_htag_filter1 = $rb_plus(self.$level(), 1).$to_s();
        _buf['$<<']("<h".$freeze());
        _buf['$<<'](_slim_htag_filter1);
        _slim_codeattributes1 = self.$id();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"".$freeze());
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = [self.$style(), self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$to_s())
        };
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.$title());
        _buf['$<<']("</h".$freeze());
        _buf['$<<'](_slim_htag_filter1);
        _buf['$<<'](">".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25));
    }, TMP_Converter_floating_title_26.$$arity = -2);
    
    Opal.defn(self, '$image', TMP_Converter_image_28 = function $$image(node, opts) {
      var TMP_27, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_27 = function(){var self = TMP_27.$$s || this, $a, $b, _buf = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
          } else {
          return nil
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = self['$has_role?']("stretch")) ? ($truthy($b = self['$attr?']("width")) ? $b : self['$attr?']("height"))['$!']() : $a))) {
          height = "100%"};
        if ($truthy(($truthy($a = self.$attr(1)['$==']("background")) ? $a : self.$attr(1)['$==']("canvas")))) {
          } else {
          
          _buf['$<<']("<div".$freeze());
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "imageblock"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes1 = self.$roles();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
            
            _slim_codeattributes1 = _slim_codeattributes1.$flatten();
            $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
            } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
          };
          
          $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
          _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes2 = self.id;
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes3 = [(function() {if ($truthy(self['$attr?']("align"))) {
            return "" + "text-align: " + (self.$attr("align"))
            } else {
            return nil
          }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
            return "" + "float: " + (self.$attr("float"))
            } else {
            return nil
          }; return nil; })()].$compact().$join("; ");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" style".$freeze())
              } else {
              
              _buf['$<<'](" style=\"".$freeze());
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"".$freeze());
            _slim_codeattributes4 = self.$attr("link");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("><img".$freeze());
            _slim_codeattributes5 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" src".$freeze())
                } else {
                
                _buf['$<<'](" src=\"".$freeze());
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes6 = self.$attr("alt");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" alt".$freeze())
                } else {
                
                _buf['$<<'](" alt=\"".$freeze());
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes7 = width;
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" width".$freeze())
                } else {
                
                _buf['$<<'](" width=\"".$freeze());
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes8 = height;
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" height".$freeze())
                } else {
                
                _buf['$<<'](" height=\"".$freeze());
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes9 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
              } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" style".$freeze())
                } else {
                
                _buf['$<<'](" style=\"".$freeze());
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("></a>".$freeze());
            } else {
            
            _buf['$<<']("<img".$freeze());
            _slim_codeattributes10 = self.$image_uri(self.$attr("target"));
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" src".$freeze())
                } else {
                
                _buf['$<<'](" src=\"".$freeze());
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes11 = self.$attr("alt");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" alt".$freeze())
                } else {
                
                _buf['$<<'](" alt=\"".$freeze());
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes12 = width;
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" width".$freeze())
                } else {
                
                _buf['$<<'](" width=\"".$freeze());
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes13 = height;
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" height".$freeze())
                } else {
                
                _buf['$<<'](" height=\"".$freeze());
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes14 = (function() {if ($truthy(self['$attr?']("background"))) {
              return "" + "background: " + (self.$attr("background"))
              } else {
              return nil
            }; return nil; })();
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" style".$freeze())
                } else {
                
                _buf['$<<'](" style=\"".$freeze());
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
          };
          _buf['$<<']("</div>".$freeze());
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">".$freeze());
            _buf['$<<'](self.$captioned_title());
            _buf['$<<']("</div>".$freeze());};
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
    }, TMP_Converter_image_28.$$arity = -2);
    
    Opal.defn(self, '$listing', TMP_Converter_listing_30 = function $$listing(node, opts) {
      var TMP_29, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_29 = function(){var self = TMP_29.$$s || this, $a, $b, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, nowrap = nil, language = nil, code_class = nil, pre_class = nil, pre_lang = nil, $case = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover4 = nil, _slim_codeattributes6 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;
        if (self.style == null) self.style = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "listingblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<div class=\"content\">".$freeze());
        nowrap = ($truthy($a = self.document['$attr?']("prewrap")['$!']()) ? $a : self['$option?']("nowrap"));
        if ($truthy(($truthy($a = self.style['$==']("source")) ? $a : (($b = self.style['$==']("listing")) ? self['$attr?'](1, "listing")['$!']() : self.style['$==']("listing"))))) {
          
          language = self.$attr("language");
          code_class = (function() {if ($truthy(language)) {
            return [language, "" + "language-" + (language)]
            } else {
            return nil
          }; return nil; })();
          pre_class = ["highlight"];
          pre_lang = nil;
          $case = self.$attr("source-highlighter");
          if ("coderay"['$===']($case)) {pre_class = ["CodeRay"]}
          else if ("pygments"['$===']($case)) {pre_class = ["pygments", "highlight"]}
          else if ("prettify"['$===']($case)) {
          pre_class = ["prettyprint"];
          if ($truthy(self['$attr?']("linenums"))) {
            pre_class['$<<']("linenums")};
          if ($truthy(language)) {
            pre_class['$<<'](language)};
          if ($truthy(language)) {
            pre_class['$<<']("" + "language-" + (language))};
          code_class = nil;}
          else if ("html-pipeline"['$===']($case)) {
          pre_lang = language;
          pre_class = (code_class = nil);
          nowrap = false;};
          if ($truthy(nowrap)) {
            pre_class['$<<']("nowrap")};
          _buf['$<<']("<pre".$freeze());
          _temple_html_attributeremover2 = [];
          _slim_codeattributes3 = pre_class;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
            
            _slim_codeattributes3 = _slim_codeattributes3.$flatten();
            $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
          };
          _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes4 = pre_lang;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" lang".$freeze())
              } else {
              
              _buf['$<<'](" lang=\"".$freeze());
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("><code".$freeze());
          _temple_html_attributeremover3 = [];
          _slim_codeattributes5 = code_class;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes5))) {
            
            _slim_codeattributes5 = _slim_codeattributes5.$flatten();
            $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes5.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes5.$to_s())
          };
          _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<'](">".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</code></pre>".$freeze());
          } else {
          
          _buf['$<<']("<pre".$freeze());
          _temple_html_attributeremover4 = [];
          _slim_codeattributes6 = (function() {if ($truthy(nowrap)) {
            return "nowrap"
            } else {
            return nil
          }; return nil; })();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes6))) {
            
            _slim_codeattributes6 = _slim_codeattributes6.$flatten();
            $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover4['$<<'](_slim_codeattributes6.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover4['$<<'](_slim_codeattributes6.$to_s())
          };
          _temple_html_attributeremover4 = $rb_times(_temple_html_attributeremover4, "");
          if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover4);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<'](">".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</pre>".$freeze());
        };
        _buf['$<<']("</div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29));
    }, TMP_Converter_listing_30.$$arity = -2);
    
    Opal.defn(self, '$literal', TMP_Converter_literal_32 = function $$literal(node, opts) {
      var TMP_31, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_31 = function(){var self = TMP_31.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "literalblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<div class=\"content\"><pre".$freeze());
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = (function() {if ($truthy(($truthy($a = self.document['$attr?']("prewrap")['$!']()) ? $a : self['$option?']("nowrap")))) {
          return "nowrap"
          } else {
          return nil
        }; return nil; })();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
        };
        _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre></div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_31.$$s = self, TMP_31.$$arity = 0, TMP_31));
    }, TMP_Converter_literal_32.$$arity = -2);
    
    Opal.defn(self, '$olist', TMP_Converter_olist_35 = function $$olist(node, opts) {
      var TMP_33, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_33 = function(){var self = TMP_33.$$s || this, TMP_34, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "olist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<ol".$freeze());
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.style;
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
        };
        _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes4 = self.$attr("start");
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" start".$freeze())
            } else {
            
            _buf['$<<'](" start=\"".$freeze());
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes5 = self.$list_marker_keyword();
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" type".$freeze())
            } else {
            
            _buf['$<<'](" type=\"".$freeze());
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        $send(self.$items(), 'each', [], (TMP_34 = function(item){var self = TMP_34.$$s || this, $a, _temple_html_attributeremover3 = nil, _slim_codeattributes6 = nil;
if (item == null) item = nil;
        
          _buf['$<<']("<li".$freeze());
          _temple_html_attributeremover3 = [];
          _slim_codeattributes6 = (function() {if ($truthy(($truthy($a = self['$option?']("step")) ? $a : self['$has_role?']("step")))) {
            return "fragment"
            } else {
            return nil
          }; return nil; })();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes6))) {
            
            _slim_codeattributes6 = _slim_codeattributes6.$flatten();
            $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes6.$to_s())
          };
          _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<']("><p>".$freeze());
          _buf['$<<'](item.$text());
          _buf['$<<']("</p>".$freeze());
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>".$freeze());}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));
        _buf['$<<']("</ol></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33));
    }, TMP_Converter_olist_35.$$arity = -2);
    
    Opal.defn(self, '$open', TMP_Converter_open_37 = function $$open(node, opts) {
      var TMP_36, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_36 = function(){var self = TMP_36.$$s || this, $a, $b, $c, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _temple_html_attributemerger2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil;
        if (self.style == null) self.style = nil;
        if (self.parent == null) self.parent = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.style['$==']("abstract")) {
          if ($truthy((($a = self.parent['$=='](self.document)) ? self.document.$doctype()['$==']("book") : self.parent['$=='](self.document)))) {
            self.$puts("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content.")
            } else {
            
            _buf['$<<']("<div".$freeze());
            _temple_html_attributeremover1 = [];
            _temple_html_attributemerger1 = [];
            
            $writer = [0, "quoteblock"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [1, "abstract"];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [2, []];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _slim_codeattributes1 = self.$role();
            if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
              
              _slim_codeattributes1 = _slim_codeattributes1.$flatten();
              $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
              } else {
              _temple_html_attributemerger1['$[]'](2)['$<<'](_slim_codeattributes1.$to_s())
            };
            
            $writer = [2, $rb_times(_temple_html_attributemerger1['$[]'](2), "")];
            $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
            _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
            if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"".$freeze());
              _buf['$<<'](_temple_html_attributeremover1);
              _buf['$<<']("\"".$freeze());};
            _slim_codeattributes2 = self.id;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" id".$freeze())
                } else {
                
                _buf['$<<'](" id=\"".$freeze());
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
            if ($truthy(self['$title?']())) {
              
              _buf['$<<']("<div class=\"title\">".$freeze());
              _buf['$<<'](self.$title());
              _buf['$<<']("</div>".$freeze());};
            _buf['$<<']("<blockquote>".$freeze());
            _buf['$<<'](self.$content());
            _buf['$<<']("</blockquote></div>".$freeze());
          }
        } else if ($truthy((($a = self.style['$==']("partintro")) ? ($truthy($b = ($truthy($c = self.level['$!='](0)) ? $c : self.parent.$context()['$!=']("section"))) ? $b : self.document.$doctype()['$!=']("book")) : self.style['$==']("partintro")))) {
          self.$puts("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content.")
          } else {
          
          _buf['$<<']("<div".$freeze());
          _temple_html_attributeremover2 = [];
          _temple_html_attributemerger2 = [];
          
          $writer = [0, "openblock"];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes3 = [(function() {if ($truthy(self.style['$!=']("open"))) {
            return self.style
            } else {
            return nil
          }; return nil; })(), self.$role()];
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
            
            _slim_codeattributes3 = _slim_codeattributes3.$flatten();
            $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$join(" ").$to_s());
            } else {
            _temple_html_attributemerger2['$[]'](1)['$<<'](_slim_codeattributes3.$to_s())
          };
          
          $writer = [1, $rb_times(_temple_html_attributemerger2['$[]'](1), "")];
          $send(_temple_html_attributemerger2, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover2['$<<']($send(_temple_html_attributemerger2, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
          _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes4 = self.id;
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          if ($truthy(self['$title?']())) {
            
            _buf['$<<']("<div class=\"title\">".$freeze());
            _buf['$<<'](self.$title());
            _buf['$<<']("</div>".$freeze());};
          _buf['$<<']("<div class=\"content\">".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</div></div>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36));
    }, TMP_Converter_open_37.$$arity = -2);
    
    Opal.defn(self, '$page_break', TMP_Converter_page_break_39 = function $$page_break(node, opts) {
      var TMP_38, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_38 = function(){var self = TMP_38.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div style=\"page-break-after: always;\"></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38));
    }, TMP_Converter_page_break_39.$$arity = -2);
    
    Opal.defn(self, '$paragraph', TMP_Converter_paragraph_41 = function $$paragraph(node, opts) {
      var TMP_40, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_40 = function(){var self = TMP_40.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "paragraph"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        if ($truthy(self['$has_role?']("small"))) {
          
          _buf['$<<']("<small>".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</small>".$freeze());
          } else {
          
          _buf['$<<']("<p>".$freeze());
          _buf['$<<'](self.$content());
          _buf['$<<']("</p>".$freeze());
        };
        _buf['$<<']("</div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_40.$$s = self, TMP_40.$$arity = 0, TMP_40));
    }, TMP_Converter_paragraph_41.$$arity = -2);
    
    Opal.defn(self, '$pass', TMP_Converter_pass_43 = function $$pass(node, opts) {
      var TMP_42, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_42 = function(){var self = TMP_42.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.$content());
        return (_buf = _buf.$join("".$freeze()));}, TMP_42.$$s = self, TMP_42.$$arity = 0, TMP_42));
    }, TMP_Converter_pass_43.$$arity = -2);
    
    Opal.defn(self, '$preamble', TMP_Converter_preamble_45 = function $$preamble(node, opts) {
      var TMP_44, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_44 = function(){var self = TMP_44.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        return (_buf = _buf.$join("".$freeze()));}, TMP_44.$$s = self, TMP_44.$$arity = 0, TMP_44));
    }, TMP_Converter_preamble_45.$$arity = -2);
    
    Opal.defn(self, '$quote', TMP_Converter_quote_47 = function $$quote(node, opts) {
      var TMP_46, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_46 = function(){var self = TMP_46.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "quoteblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<blockquote>".$freeze());
        _buf['$<<'](self.$content());
        _buf['$<<']("</blockquote>".$freeze());
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">".$freeze());
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>".$freeze());
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>".$freeze());};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>".$freeze())};
            _buf['$<<']("&#8212; ".$freeze());
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("</div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46));
    }, TMP_Converter_quote_47.$$arity = -2);
    
    Opal.defn(self, '$ruler', TMP_Converter_ruler_49 = function $$ruler(node, opts) {
      var TMP_48, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_48 = function(){var self = TMP_48.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_48.$$s = self, TMP_48.$$arity = 0, TMP_48));
    }, TMP_Converter_ruler_49.$$arity = -2);
    
    Opal.defn(self, '$sidebar', TMP_Converter_sidebar_51 = function $$sidebar(node, opts) {
      var TMP_50, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_50 = function(){var self = TMP_50.$$s || this, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "sidebarblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("><div class=\"content\">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_50.$$s = self, TMP_50.$$arity = 0, TMP_50));
    }, TMP_Converter_sidebar_51.$$arity = -2);
    
    Opal.defn(self, '$stem', TMP_Converter_stem_53 = function $$stem(node, opts) {
      var TMP_52, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_52 = function(){var self = TMP_52.$$s || this, $a, $b, _buf = nil, open = nil, close = nil, equation = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil;
        if (self.style == null) self.style = nil;
        if (self.subs == null) self.subs = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $b = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]'](self.style.$to_sym()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        equation = self.$content().$strip();
        if ($truthy(($truthy($a = ($truthy($b = self.subs['$nil?']()) ? $b : self.subs['$empty?']())) ? self['$attr?']("subs")['$!']() : $a))) {
          equation = self.$sub_specialcharacters(equation)};
        if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {
          } else {
          equation = "" + (open) + (equation) + (close)
        };
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "stemblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<div class=\"content\">".$freeze());
        _buf['$<<'](equation);
        _buf['$<<']("</div></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52));
    }, TMP_Converter_stem_53.$$arity = -2);
    
    Opal.defn(self, '$table', TMP_Converter_table_64 = function $$table(node, opts) {
      var TMP_54, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_54 = function(){var self = TMP_54.$$s || this, TMP_55, TMP_56, TMP_57, TMP_58, _buf = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.id == null) self.id = nil;
        if (self.columns == null) self.columns = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<table".$freeze());
        _slim_codeattributes1 = self.id;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"".$freeze());
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = ["tableblock", "" + "frame-" + (self.$attr("frame", "all")), "" + "grid-" + (self.$attr("grid", "all")), self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$to_s())
        };
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes3 = [(function() {if ($truthy(self['$option?']("autowidth"))) {
          return nil
          } else {
          return "" + "width:" + (self.$attr("tablepcwidth")) + "%"
        }; return nil; })(), (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float:" + (self.$attr("float"))
          } else {
          return nil
        }; return nil; })()].$compact().$join("; ");
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" style".$freeze())
            } else {
            
            _buf['$<<'](" style=\"".$freeze());
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<caption class=\"title\">".$freeze());
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</caption>".$freeze());};
        if ($truthy(self.$attr("rowcount")['$zero?']())) {
          } else {
          
          _buf['$<<']("<colgroup>".$freeze());
          if ($truthy(self['$option?']("autowidth"))) {
            $send(self.columns, 'each', [], (TMP_55 = function(){var self = TMP_55.$$s || this;

            return _buf['$<<']("<col>".$freeze())}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55))
            } else {
            $send(self.columns, 'each', [], (TMP_56 = function(col){var self = TMP_56.$$s || this;
if (col == null) col = nil;
            
              _buf['$<<']("<col style=\"width:".$freeze());
              _buf['$<<'](col.$attr("colpcwidth"));
              return _buf['$<<']("%\">".$freeze());}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56))
          };
          _buf['$<<']("</colgroup>".$freeze());
          $send($send(["head", "foot", "body"], 'select', [], (TMP_57 = function(tblsec){var self = TMP_57.$$s || this;
            if (self.rows == null) self.rows = nil;
if (tblsec == null) tblsec = nil;
          return self.rows['$[]'](tblsec)['$empty?']()['$!']()}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57)), 'each', [], (TMP_58 = function(tblsec){var self = TMP_58.$$s || this, TMP_59;
            if (self.rows == null) self.rows = nil;
if (tblsec == null) tblsec = nil;
          
            _buf['$<<']("<t".$freeze());
            _buf['$<<'](tblsec);
            _buf['$<<'](">".$freeze());
            return $send(self.rows['$[]'](tblsec), 'each', [], (TMP_59 = function(row){var self = TMP_59.$$s || this, TMP_60;
if (row == null) row = nil;
            
              _buf['$<<']("<tr>".$freeze());
              $send(row, 'each', [], (TMP_60 = function(cell){var self = TMP_60.$$s || this, $a, TMP_61, cell_content = nil, $case = nil, _slim_controls1 = nil;
                if (self.document == null) self.document = nil;
if (cell == null) cell = nil;
              
                if (tblsec['$==']("head")) {
                  cell_content = cell.$text()
                  } else {
                  $case = cell.$style();
                  if ("verse"['$===']($case) || "literal"['$===']($case)) {cell_content = cell.$text()}
                  else {cell_content = cell.$content()}
                };
                _slim_controls1 = $send(self, 'html_tag', [(function() {if ($truthy(($truthy($a = tblsec['$==']("head")) ? $a : cell.$style()['$==']("header")))) {
                  return "th"
                  } else {
                  return "td"
                }; return nil; })(), $hash2(["class", "colspan", "rowspan", "style"], {"class": ["tableblock", "" + "halign-" + (cell.$attr("halign")), "" + "valign-" + (cell.$attr("valign"))], "colspan": cell.$colspan(), "rowspan": cell.$rowspan(), "style": (function() {if ($truthy(self.document['$attr?']("cellbgcolor"))) {
                  return "" + "background-color:" + (self.document.$attr("cellbgcolor")) + ";"
                  } else {
                  return nil
                }; return nil; })()})], (TMP_61 = function(){var self = TMP_61.$$s || this, TMP_62, TMP_63, _slim_controls2 = nil;

                
                  _slim_controls2 = [];
                  if (tblsec['$==']("head")) {
                    _slim_controls2['$<<'](cell_content.$to_s())
                    } else {
                    $case = cell.$style();
                    if ("asciidoc"['$===']($case)) {
                    _slim_controls2['$<<']("<div>".$freeze());
                    _slim_controls2['$<<'](cell_content.$to_s());
                    _slim_controls2['$<<']("</div>".$freeze());}
                    else if ("verse"['$===']($case)) {
                    _slim_controls2['$<<']("<div class=\"verse\">".$freeze());
                    _slim_controls2['$<<'](cell_content.$to_s());
                    _slim_controls2['$<<']("</div>".$freeze());}
                    else if ("literal"['$===']($case)) {
                    _slim_controls2['$<<']("<div class=\"literal\"><pre>".$freeze());
                    _slim_controls2['$<<'](cell_content.$to_s());
                    _slim_controls2['$<<']("</pre></div>".$freeze());}
                    else if ("header"['$===']($case)) {$send(cell_content, 'each', [], (TMP_62 = function(text){var self = TMP_62.$$s || this;
if (text == null) text = nil;
                    
                      _slim_controls2['$<<']("<p class=\"tableblock header\">".$freeze());
                      _slim_controls2['$<<'](text.$to_s());
                      return _slim_controls2['$<<']("</p>".$freeze());}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62))}
                    else {$send(cell_content, 'each', [], (TMP_63 = function(text){var self = TMP_63.$$s || this;
if (text == null) text = nil;
                    
                      _slim_controls2['$<<']("<p class=\"tableblock\">".$freeze());
                      _slim_controls2['$<<'](text.$to_s());
                      return _slim_controls2['$<<']("</p>".$freeze());}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63))}
                  };
                  return (_slim_controls2 = $rb_times(_slim_controls2, ""));}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61));
                return _buf['$<<'](_slim_controls1);}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60));
              return _buf['$<<']("</tr>".$freeze());}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59));}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58));
        };
        _buf['$<<']("</table>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_54.$$s = self, TMP_54.$$arity = 0, TMP_54));
    }, TMP_Converter_table_64.$$arity = -2);
    
    Opal.defn(self, '$thematic_break', TMP_Converter_thematic_break_66 = function $$thematic_break(node, opts) {
      var TMP_65, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_65 = function(){var self = TMP_65.$$s || this, _buf = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<hr>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_65.$$s = self, TMP_65.$$arity = 0, TMP_65));
    }, TMP_Converter_thematic_break_66.$$arity = -2);
    
    Opal.defn(self, '$toc', TMP_Converter_toc_68 = function $$toc(node, opts) {
      var TMP_67, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_67 = function(){var self = TMP_67.$$s || this, $a, $b, _buf = nil, toc_id = nil, toc_role = nil, toc_title_id = nil, toc_title = nil, toc_levels = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("toc"))) {
          
          toc_id = self.id;
          toc_role = self.$attr("role", self.document.$attr("toc-class", "toc"));
          toc_title_id = nil;
          toc_title = (function() {if ($truthy(self['$title?']())) {
            return self.$title()
            } else {
            
            return self.document.$attr("toc-title");
          }; return nil; })();
          toc_levels = (function() {if ($truthy(self['$attr?']("levels"))) {
            return self.$attr("levels").$to_i()
            } else {
            return self.document.$attr("toclevels", 2).$to_i()
          }; return nil; })();
          if ($truthy(($truthy($a = toc_id['$!']()) ? ($truthy($b = self.document['$embedded?']()) ? $b : self.document['$attr?']("toc-placement")['$!']()) : $a))) {
            
            toc_id = "toc";
            toc_title_id = "toctitle";};
          _buf['$<<']("<div".$freeze());
          _slim_codeattributes1 = toc_id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = toc_role;
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes2))) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$to_s())
          };
          _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<']("><div class=\"title\"".$freeze());
          _slim_codeattributes3 = toc_title_id;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          _buf['$<<'](toc_title);
          _buf['$<<']("</div>".$freeze());
          _buf['$<<'](Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'HTML5'), 'DocumentTemplate').$outline(self.document, toc_levels));
          _buf['$<<']("</div>".$freeze());};
        return (_buf = _buf.$join("".$freeze()));}, TMP_67.$$s = self, TMP_67.$$arity = 0, TMP_67));
    }, TMP_Converter_toc_68.$$arity = -2);
    
    Opal.defn(self, '$ulist', TMP_Converter_ulist_71 = function $$ulist(node, opts) {
      var TMP_69, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_69 = function(){var self = TMP_69.$$s || this, $a, TMP_70, _buf = nil, checklist = nil, marker_checked = nil, marker_unchecked = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy((checklist = (function() {if ($truthy(self['$option?']("checklist"))) {
          return "checklist"
          } else {
          return nil
        }; return nil; })()))) {
          if ($truthy(self['$option?']("interactive"))) {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\">";
          } else if ($truthy(self.document['$attr?']("icons", "font"))) {
            
            marker_checked = "<i class=\"icon-check\"></i>";
            marker_unchecked = "<i class=\"icon-check-empty\"></i>";
            } else {
            
            marker_checked = "<input type=\"checkbox\" data-item-complete=\"1\" checked disabled>";
            marker_unchecked = "<input type=\"checkbox\" data-item-complete=\"0\" disabled>";
          }};
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "ulist"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [checklist, self.style, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<ul".$freeze());
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = ($truthy($a = checklist) ? $a : self.style);
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
        };
        _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        $send(self.$items(), 'each', [], (TMP_70 = function(item){var self = TMP_70.$$s || this, $b, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil;
if (item == null) item = nil;
        
          _buf['$<<']("<li".$freeze());
          _temple_html_attributeremover3 = [];
          _slim_codeattributes4 = (function() {if ($truthy(($truthy($b = self['$option?']("step")) ? $b : self['$has_role?']("step")))) {
            return "fragment"
            } else {
            return nil
          }; return nil; })();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes4))) {
            
            _slim_codeattributes4 = _slim_codeattributes4.$flatten();
            $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$to_s())
          };
          _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
          if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover3);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<']("><p>".$freeze());
          if ($truthy(($truthy($b = checklist) ? item['$attr?']("checkbox") : $b))) {
            _buf['$<<']("" + ((function() {if ($truthy(item['$attr?']("checked"))) {
              return marker_checked
              } else {
              return marker_unchecked
            }; return nil; })()) + (item.$text()))
            } else {
            _buf['$<<'](item.$text())
          };
          _buf['$<<']("</p>".$freeze());
          if ($truthy(item['$blocks?']())) {
            _buf['$<<'](item.$content())};
          return _buf['$<<']("</li>".$freeze());}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70));
        _buf['$<<']("</ul></div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_69.$$s = self, TMP_69.$$arity = 0, TMP_69));
    }, TMP_Converter_ulist_71.$$arity = -2);
    
    Opal.defn(self, '$verse', TMP_Converter_verse_73 = function $$verse(node, opts) {
      var TMP_72, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_72 = function(){var self = TMP_72.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, attribution = nil, citetitle = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "verseblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$title());
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("<pre class=\"content\">".$freeze());
        _buf['$<<'](self.$content());
        _buf['$<<']("</pre>".$freeze());
        attribution = (function() {if ($truthy(self['$attr?']("attribution"))) {
          
          return self.$attr("attribution");
          } else {
          return nil
        }; return nil; })();
        citetitle = (function() {if ($truthy(self['$attr?']("citetitle"))) {
          
          return self.$attr("citetitle");
          } else {
          return nil
        }; return nil; })();
        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {
          
          _buf['$<<']("<div class=\"attribution\">".$freeze());
          if ($truthy(citetitle)) {
            
            _buf['$<<']("<cite>".$freeze());
            _buf['$<<'](citetitle);
            _buf['$<<']("</cite>".$freeze());};
          if ($truthy(attribution)) {
            
            if ($truthy(citetitle)) {
              _buf['$<<']("<br>".$freeze())};
            _buf['$<<']("&#8212; ".$freeze());
            _buf['$<<'](attribution);};
          _buf['$<<']("</div>".$freeze());};
        _buf['$<<']("</div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_72.$$s = self, TMP_72.$$arity = 0, TMP_72));
    }, TMP_Converter_verse_73.$$arity = -2);
    
    Opal.defn(self, '$video', TMP_Converter_video_75 = function $$video(node, opts) {
      var TMP_74, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_74 = function(){var self = TMP_74.$$s || this, $a, _buf = nil, no_stretch = nil, width = nil, height = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, loop_param = nil, src = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, params = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil;
        if (self.style == null) self.style = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        no_stretch = ($truthy($a = self['$attr?']("width")) ? $a : self['$attr?']("height"));
        width = (function() {if ($truthy(self['$attr?']("width"))) {
          
          return self.$attr("width");
          } else {
          return "100%"
        }; return nil; })();
        height = (function() {if ($truthy(self['$attr?']("height"))) {
          
          return self.$attr("height");
          } else {
          return "100%"
        }; return nil; })();
        _buf['$<<']("<div".$freeze());
        _temple_html_attributeremover1 = [];
        _temple_html_attributemerger1 = [];
        
        $writer = [0, "videoblock"];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, []];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _slim_codeattributes1 = [self.style, self.$role(), (function() {if ($truthy(no_stretch)) {
          return nil
          } else {
          return "stretch"
        }; return nil; })()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes1.$to_s())
        };
        
        $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
        $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = self.id;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy(self['$title?']())) {
          
          _buf['$<<']("<div class=\"title\">".$freeze());
          _buf['$<<'](self.$captioned_title());
          _buf['$<<']("</div>".$freeze());};
        $case = self.$attr("poster");
        if ("vimeo"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        start_anchor = (function() {if ($truthy(self['$attr?']("start"))) {
          return "" + "#at=" + (self.$attr("start"))
          } else {
          return nil
        }; return nil; })();
        delimiter = "?";
        loop_param = (function() {if ($truthy(self['$option?']("loop"))) {
          return "" + (delimiter) + "loop=1"
          } else {
          return nil
        }; return nil; })();
        src = "" + (asset_uri_scheme) + "//player.vimeo.com/video/" + (self.$attr("target")) + (start_anchor) + (loop_param);
        _buf['$<<']("<iframe".$freeze());
        _slim_codeattributes3 = width;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" width".$freeze())
            } else {
            
            _buf['$<<'](" width=\"".$freeze());
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes4 = height;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" height".$freeze())
            } else {
            
            _buf['$<<'](" height=\"".$freeze());
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes5 = src;
        if ($truthy(_slim_codeattributes5)) {
          if (_slim_codeattributes5['$=='](true)) {
            _buf['$<<'](" src".$freeze())
            } else {
            
            _buf['$<<'](" src=\"".$freeze());
            _buf['$<<'](_slim_codeattributes5);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes6 = 0;
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" frameborder".$freeze())
            } else {
            
            _buf['$<<'](" frameborder=\"".$freeze());
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](" webkitAllowFullScreen mozallowfullscreen allowFullScreen".$freeze());
        _slim_codeattributes7 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes7)) {
          if (_slim_codeattributes7['$=='](true)) {
            _buf['$<<'](" data-autoplay".$freeze())
            } else {
            
            _buf['$<<'](" data-autoplay=\"".$freeze());
            _buf['$<<'](_slim_codeattributes7);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("></iframe>".$freeze());}
        else if ("youtube"['$===']($case)) {
        if ($truthy((asset_uri_scheme = self.$attr("asset_uri_scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        params = ["rel=0"];
        if ($truthy(self['$attr?']("start"))) {
          params['$<<']("" + "start=" + (self.$attr("start")))};
        if ($truthy(self['$attr?']("end"))) {
          params['$<<']("" + "end=" + (self.$attr("end")))};
        if ($truthy(self['$option?']("loop"))) {
          params['$<<']("loop=1")};
        if ($truthy(self['$option?']("nocontrols"))) {
          params['$<<']("controls=0")};
        src = "" + (asset_uri_scheme) + "//www.youtube.com/embed/" + (self.$attr("target")) + "?" + ($rb_times(params, "&amp;"));
        _buf['$<<']("<iframe".$freeze());
        _slim_codeattributes8 = width;
        if ($truthy(_slim_codeattributes8)) {
          if (_slim_codeattributes8['$=='](true)) {
            _buf['$<<'](" width".$freeze())
            } else {
            
            _buf['$<<'](" width=\"".$freeze());
            _buf['$<<'](_slim_codeattributes8);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes9 = height;
        if ($truthy(_slim_codeattributes9)) {
          if (_slim_codeattributes9['$=='](true)) {
            _buf['$<<'](" height".$freeze())
            } else {
            
            _buf['$<<'](" height=\"".$freeze());
            _buf['$<<'](_slim_codeattributes9);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes10 = src;
        if ($truthy(_slim_codeattributes10)) {
          if (_slim_codeattributes10['$=='](true)) {
            _buf['$<<'](" src".$freeze())
            } else {
            
            _buf['$<<'](" src=\"".$freeze());
            _buf['$<<'](_slim_codeattributes10);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes11 = 0;
        if ($truthy(_slim_codeattributes11)) {
          if (_slim_codeattributes11['$=='](true)) {
            _buf['$<<'](" frameborder".$freeze())
            } else {
            
            _buf['$<<'](" frameborder=\"".$freeze());
            _buf['$<<'](_slim_codeattributes11);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes12 = self['$option?']("nofullscreen")['$!']();
        if ($truthy(_slim_codeattributes12)) {
          if (_slim_codeattributes12['$=='](true)) {
            _buf['$<<'](" allowfullscreen".$freeze())
            } else {
            
            _buf['$<<'](" allowfullscreen=\"".$freeze());
            _buf['$<<'](_slim_codeattributes12);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes13 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes13)) {
          if (_slim_codeattributes13['$=='](true)) {
            _buf['$<<'](" data-autoplay".$freeze())
            } else {
            
            _buf['$<<'](" data-autoplay=\"".$freeze());
            _buf['$<<'](_slim_codeattributes13);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("></iframe>".$freeze());}
        else {
        _buf['$<<']("<video".$freeze());
        _slim_codeattributes14 = self.$media_uri(self.$attr("target"));
        if ($truthy(_slim_codeattributes14)) {
          if (_slim_codeattributes14['$=='](true)) {
            _buf['$<<'](" src".$freeze())
            } else {
            
            _buf['$<<'](" src=\"".$freeze());
            _buf['$<<'](_slim_codeattributes14);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes15 = width;
        if ($truthy(_slim_codeattributes15)) {
          if (_slim_codeattributes15['$=='](true)) {
            _buf['$<<'](" width".$freeze())
            } else {
            
            _buf['$<<'](" width=\"".$freeze());
            _buf['$<<'](_slim_codeattributes15);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes16 = height;
        if ($truthy(_slim_codeattributes16)) {
          if (_slim_codeattributes16['$=='](true)) {
            _buf['$<<'](" height".$freeze())
            } else {
            
            _buf['$<<'](" height=\"".$freeze());
            _buf['$<<'](_slim_codeattributes16);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes17 = (function() {if ($truthy(self.$attr("poster"))) {
          return self.$media_uri(self.$attr("poster"))
          } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes17)) {
          if (_slim_codeattributes17['$=='](true)) {
            _buf['$<<'](" poster".$freeze())
            } else {
            
            _buf['$<<'](" poster=\"".$freeze());
            _buf['$<<'](_slim_codeattributes17);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes18 = self['$option?']("autoplay");
        if ($truthy(_slim_codeattributes18)) {
          if (_slim_codeattributes18['$=='](true)) {
            _buf['$<<'](" data-autoplay".$freeze())
            } else {
            
            _buf['$<<'](" data-autoplay=\"".$freeze());
            _buf['$<<'](_slim_codeattributes18);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes19 = self['$option?']("nocontrols")['$!']();
        if ($truthy(_slim_codeattributes19)) {
          if (_slim_codeattributes19['$=='](true)) {
            _buf['$<<'](" controls".$freeze())
            } else {
            
            _buf['$<<'](" controls=\"".$freeze());
            _buf['$<<'](_slim_codeattributes19);
            _buf['$<<']("\"".$freeze());
          }};
        _slim_codeattributes20 = self['$option?']("loop");
        if ($truthy(_slim_codeattributes20)) {
          if (_slim_codeattributes20['$=='](true)) {
            _buf['$<<'](" loop".$freeze())
            } else {
            
            _buf['$<<'](" loop=\"".$freeze());
            _buf['$<<'](_slim_codeattributes20);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">Your browser does not support the video tag.</video>".$freeze());};
        _buf['$<<']("</div>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_74.$$s = self, TMP_74.$$arity = 0, TMP_74));
    }, TMP_Converter_video_75.$$arity = -2);
    
    Opal.defn(self, '$document', TMP_Converter_document_78 = function $$document(node, opts) {
      var TMP_76, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_76 = function(){var self = TMP_76.$$s || this, TMP_77, $a, _buf = nil, _slim_codeattributes1 = nil, revealjsdir = nil, asset_uri_scheme = nil, cdn_base = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, eqnums_val = nil, eqnums_opt = nil, $case = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, docinfo_content = nil, _slim_codeattributes10 = nil, customcss = nil, bg_image = nil, bg_video = nil, _temple_html_attributeremover1 = nil, _temple_html_attributemerger1 = nil, $writer = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _title_obj = nil, _slice = nil, preamble = nil;
        if (self.safe == null) self.safe = nil;
        if (self.header == null) self.header = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<!DOCTYPE html><html".$freeze());
        _slim_codeattributes1 = (function() {if ($truthy(self['$attr?']("nolang"))) {
          return nil
          } else {
          return self.$attr("lang", "en")
        }; return nil; })();
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" lang".$freeze())
            } else {
            
            _buf['$<<'](" lang=\"".$freeze());
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("><head><meta charset=\"utf-8\">".$freeze());
        revealjsdir = self.$attr("revealjsdir", "reveal.js");
        if ($truthy((asset_uri_scheme = self.$attr("asset-uri-scheme", "https"))['$empty?']())) {
          } else {
          asset_uri_scheme = "" + (asset_uri_scheme) + ":"
        };
        cdn_base = "" + (asset_uri_scheme) + "//cdnjs.cloudflare.com/ajax/libs";
        $send(["description", "keywords", "author", "copyright"], 'each', [], (TMP_77 = function(key){var self = TMP_77.$$s || this, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
if (key == null) key = nil;
        if ($truthy(self['$attr?'](key))) {
            
            _buf['$<<']("<meta".$freeze());
            _slim_codeattributes2 = key;
            if ($truthy(_slim_codeattributes2)) {
              if (_slim_codeattributes2['$=='](true)) {
                _buf['$<<'](" name".$freeze())
                } else {
                
                _buf['$<<'](" name=\"".$freeze());
                _buf['$<<'](_slim_codeattributes2);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes3 = self.$attr(key);
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" content".$freeze())
                } else {
                
                _buf['$<<'](" content=\"".$freeze());
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"".$freeze());
              }};
            return _buf['$<<'](">".$freeze());
            } else {
            return nil
          }}, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77));
        _buf['$<<']("<title>".$freeze());
        _buf['$<<'](self.$doctitle($hash2(["sanitize", "use_fallback"], {"sanitize": true, "use_fallback": true})));
        _buf['$<<']("</title><meta content=\"yes\" name=\"apple-mobile-web-app-capable\"><meta content=\"black-translucent\" name=\"apple-mobile-web-app-status-bar-style\"><meta content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui\" name=\"viewport\"><link href=\"".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/reveal.css\" rel=\"stylesheet\">".$freeze());
        if ($truthy(self['$attr?']("revealjs_customtheme"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
          _slim_codeattributes4 = self.$attr("revealjs_customtheme");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" href".$freeze())
              } else {
              
              _buf['$<<'](" href=\"".$freeze());
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](" id=\"theme\">".$freeze());
          } else {
          
          _buf['$<<']("<link rel=\"stylesheet\" href=\"".$freeze());
          _buf['$<<'](revealjsdir);
          _buf['$<<']("/css/theme/".$freeze());
          _buf['$<<'](self.$attr("revealjs_theme", "black"));
          _buf['$<<'](".css\" id=\"theme\">".$freeze());
        };
        if ($truthy(self['$attr?']("icons", "font"))) {
          if ($truthy(self['$attr?']("iconfont-remote"))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
            _slim_codeattributes5 = self.$attr("iconfont-cdn", "" + (cdn_base) + "/font-awesome/4.3.0/css/font-awesome.min.css");
            if ($truthy(_slim_codeattributes5)) {
              if (_slim_codeattributes5['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes5);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
            } else {
            
            _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
            _slim_codeattributes6 = self.$normalize_web_path("" + (self.$attr("iconfont-name", "font-awesome")) + ".css", self.$attr("stylesdir", ""), false);
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
          }};
        if ($truthy(self['$attr?']("stem"))) {
          
          eqnums_val = self.$attr("eqnums", "none");
          if (eqnums_val['$==']("")) {
            eqnums_val = "AMS"};
          eqnums_opt = "" + " equationNumbers: { autoNumber: \"" + (eqnums_val) + "\" } ";
          _buf['$<<']("<script type=\"text/x-mathjax-config\">MathJax.Hub.Config({\ntex2jax: {\n  inlineMath: [".$freeze());
          _buf['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  displayMath: [".$freeze());
          _buf['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("latexmath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|nolatexmath\"\n},\nasciimath2jax: {\n  delimiters: [".$freeze());
          _buf['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'BLOCK_MATH_DELIMITERS')['$[]']("asciimath").$to_s());
          _buf['$<<']("],\n  ignoreClass: \"nostem|noasciimath\"\n},\nTeX: {".$freeze());
          _buf['$<<'](eqnums_opt);
          _buf['$<<']("}\n});</script><script src=\"".$freeze());
          _buf['$<<'](cdn_base);
          _buf['$<<']("/mathjax/2.4.0/MathJax.js?config=TeX-MML-AM_HTMLorMML\"></script>".$freeze());};
        $case = self.$attr("source-highlighter");
        if ("coderay"['$===']($case)) {if (self.$attr("coderay-css", "class")['$==']("class")) {
          if ($truthy(($truthy($a = $rb_ge(self.safe, Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'SafeMode'), 'SECURE'))) ? $a : self['$attr?']("linkcss")))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
            _slim_codeattributes7 = self.$normalize_web_path("asciidoctor-coderay.css", self.$attr("stylesdir", ""));
            if ($truthy(_slim_codeattributes7)) {
              if (_slim_codeattributes7['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes7);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
            } else {
            
            _buf['$<<']("<style>".$freeze());
            _buf['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Stylesheets').$instance().$coderay_stylesheet_data());
            _buf['$<<']("</style>".$freeze());
          }}}
        else if ("pygments"['$===']($case)) {if (self.$attr("pygments-css", "class")['$==']("class")) {
          if ($truthy(($truthy($a = $rb_ge(self.safe, Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'SafeMode'), 'SECURE'))) ? $a : self['$attr?']("linkcss")))) {
            
            _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
            _slim_codeattributes8 = self.$normalize_web_path("asciidoctor-pygments.css", self.$attr("stylesdir", ""));
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
            } else {
            
            _buf['$<<']("<style>".$freeze());
            _buf['$<<'](Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Stylesheets').$instance().$pygments_stylesheet_data(self.$attr("pygments-style")));
            _buf['$<<']("</style>".$freeze());
          }}};
        if ($truthy(self['$attr?']("highlightjs-theme"))) {
          
          _buf['$<<']("<link".$freeze());
          _slim_codeattributes9 = self.$attr("highlightjs-theme");
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" href".$freeze())
              } else {
              
              _buf['$<<'](" href=\"".$freeze());
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](" rel=\"stylesheet\">".$freeze());
          } else {
          
          _buf['$<<']("<link href=\"".$freeze());
          _buf['$<<'](revealjsdir);
          _buf['$<<']("/lib/css/zenburn.css\" rel=\"stylesheet\">".$freeze());
        };
        _buf['$<<']("<script>document.write( '<link rel=\"stylesheet\" href=\"".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css\" type=\"text/css\" media=\"print\">' );</script>".$freeze());
        if ($truthy((docinfo_content = self.$docinfo("header", ".html"))['$empty?']())) {
          } else {
          _buf['$<<'](docinfo_content)
        };
        if ($truthy(self['$attr?']("customcss"))) {
          
          _buf['$<<']("<link rel=\"stylesheet\"".$freeze());
          _slim_codeattributes10 = (function() {if ($truthy((customcss = self.$attr("customcss"))['$empty?']())) {
            return "asciidoctor-revealjs.css"
            } else {
            return customcss
          }; return nil; })();
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" href".$freeze())
              } else {
              
              _buf['$<<'](" href=\"".$freeze());
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());};
        _buf['$<<']("</head><body><div class=\"reveal\"><div class=\"slides\">".$freeze());
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
          } else {
          
          bg_image = (function() {if ($truthy(self['$attr?']("title-slide-background-image"))) {
            
            return self.$image_uri(self.$attr("title-slide-background-image"));
            } else {
            return nil
          }; return nil; })();
          bg_video = (function() {if ($truthy(self['$attr?']("title-slide-background-video"))) {
            
            return self.$media_uri(self.$attr("title-slide-background-video"));
            } else {
            return nil
          }; return nil; })();
          _buf['$<<']("<section".$freeze());
          _temple_html_attributeremover1 = [];
          _temple_html_attributemerger1 = [];
          
          $writer = [0, "title"];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [1, []];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _slim_codeattributes11 = self.$role();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes11))) {
            
            _slim_codeattributes11 = _slim_codeattributes11.$flatten();
            $send(_slim_codeattributes11, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes11, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes11.$join(" ").$to_s());
            } else {
            _temple_html_attributemerger1['$[]'](1)['$<<'](_slim_codeattributes11.$to_s())
          };
          
          $writer = [1, $rb_times(_temple_html_attributemerger1['$[]'](1), "")];
          $send(_temple_html_attributemerger1, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          _temple_html_attributeremover1['$<<']($send(_temple_html_attributemerger1, 'reject', [], "empty?".$to_proc()).$join(" ").$to_s());
          _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"".$freeze());};
          _buf['$<<'](" data-state=\"title\"".$freeze());
          _slim_codeattributes12 = self.$attr("title-slide-transition");
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes13 = self.$attr("title-slide-transition-speed");
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-transition-speed".$freeze())
              } else {
              
              _buf['$<<'](" data-transition-speed=\"".$freeze());
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes14 = self.$attr("title-slide-background");
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-background".$freeze())
              } else {
              
              _buf['$<<'](" data-background=\"".$freeze());
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes15 = self.$attr("title-slide-background-size");
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" data-background-size".$freeze())
              } else {
              
              _buf['$<<'](" data-background-size=\"".$freeze());
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes16 = bg_image;
          if ($truthy(_slim_codeattributes16)) {
            if (_slim_codeattributes16['$=='](true)) {
              _buf['$<<'](" data-background-image".$freeze())
              } else {
              
              _buf['$<<'](" data-background-image=\"".$freeze());
              _buf['$<<'](_slim_codeattributes16);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes17 = bg_video;
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _buf['$<<'](" data-background-video".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video=\"".$freeze());
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes18 = self.$attr("title-slide-background-video-loop");
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _buf['$<<'](" data-background-video-loop".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-loop=\"".$freeze());
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes19 = self.$attr("title-slide-background-video-muted");
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _buf['$<<'](" data-background-video-muted".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-muted=\"".$freeze());
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes20 = self.$attr("title-slide-background-iframe");
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _buf['$<<'](" data-background-iframe".$freeze())
              } else {
              
              _buf['$<<'](" data-background-iframe=\"".$freeze());
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes21 = self.$attr("title-slide-background-color");
          if ($truthy(_slim_codeattributes21)) {
            if (_slim_codeattributes21['$=='](true)) {
              _buf['$<<'](" data-background-color".$freeze())
              } else {
              
              _buf['$<<'](" data-background-color=\"".$freeze());
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes22 = self.$attr("title-slide-background-repeat");
          if ($truthy(_slim_codeattributes22)) {
            if (_slim_codeattributes22['$=='](true)) {
              _buf['$<<'](" data-background-repeat".$freeze())
              } else {
              
              _buf['$<<'](" data-background-repeat=\"".$freeze());
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes23 = self.$attr("title-slide-background-position");
          if ($truthy(_slim_codeattributes23)) {
            if (_slim_codeattributes23['$=='](true)) {
              _buf['$<<'](" data-background-position".$freeze())
              } else {
              
              _buf['$<<'](" data-background-position=\"".$freeze());
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes24 = self.$attr("title-slide-background-transition");
          if ($truthy(_slim_codeattributes24)) {
            if (_slim_codeattributes24['$=='](true)) {
              _buf['$<<'](" data-background-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-background-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          if ($truthy((_title_obj = self.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
            
            _buf['$<<']("<h1>".$freeze());
            _buf['$<<'](self.$slice_text(_title_obj.$title(), (_slice = self.$header()['$option?']("slice"))));
            _buf['$<<']("</h1><h2>".$freeze());
            _buf['$<<'](self.$slice_text(_title_obj.$subtitle(), _slice));
            _buf['$<<']("</h2>".$freeze());
            } else {
            
            _buf['$<<']("<h1>".$freeze());
            _buf['$<<'](self.header.$title());
            _buf['$<<']("</h1>".$freeze());
          };
          preamble = self.document.$find_by($hash2(["context"], {"context": "preamble"}));
          if ($truthy(($truthy($a = preamble['$nil?']()) ? $a : preamble.$length()['$=='](0)))) {
            } else {
            
            _buf['$<<']("<div class=\"preamble\">".$freeze());
            _buf['$<<'](preamble.$pop().$content());
            _buf['$<<']("</div>".$freeze());
          };
          if ($truthy(self.$author()['$nil?']())) {
            } else {
            
            _buf['$<<']("<p class=\"author\"><small>".$freeze());
            _buf['$<<'](self.$author());
            _buf['$<<']("</small></p>".$freeze());
          };
          _buf['$<<']("</section>".$freeze());
        };
        _buf['$<<'](self.$content());
        _buf['$<<']("</div></div><script src=\"".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/lib/js/head.min.js\"></script><script src=\"".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/js/reveal.js\"></script><script>// See https://github.com/hakimel/reveal.js#configuration for a full list of configuration options\nReveal.initialize({\n  // Display controls in the bottom right corner\n  controls: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_controls", true)));
        _buf['$<<'](",\n  // Display a presentation progress bar\n  progress: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_progress", true)));
        _buf['$<<'](",\n  // Display the page number of the current slide\n  slideNumber: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_slidenumber", false)));
        _buf['$<<'](",\n  // Push each slide change to the browser history\n  history: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_history", false)));
        _buf['$<<'](",\n  // Enable keyboard shortcuts for navigation\n  keyboard: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_keyboard", true)));
        _buf['$<<'](",\n  // Enable the slide overview mode\n  overview: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_overview", true)));
        _buf['$<<'](",\n  // Vertical centering of slides\n  center: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_center", true)));
        _buf['$<<'](",\n  // Enables touch navigation on devices with touch input\n  touch: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_touch", true)));
        _buf['$<<'](",\n  // Loop the presentation\n  loop: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_loop", false)));
        _buf['$<<'](",\n  // Change the presentation direction to be RTL\n  rtl: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_rtl", false)));
        _buf['$<<'](",\n  // Turns fragments on and off globally\n  fragments: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_fragments", true)));
        _buf['$<<'](",\n  // Flags if the presentation is running in an embedded mode,\n  // i.e. contained within a limited portion of the screen\n  embedded: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_embedded", false)));
        _buf['$<<'](",\n  // Number of milliseconds between automatically proceeding to the\n  // next slide, disabled when set to 0, this value can be overwritten\n  // by using a data-autoslide attribute on your slides\n  autoSlide: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_autoslide", 0));
        _buf['$<<'](",\n  // Stop auto-sliding after user input\n  autoSlideStoppable: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_autoslidestoppable", true)));
        _buf['$<<'](",\n  // Enable slide navigation via mouse wheel\n  mouseWheel: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_mousewheel", false)));
        _buf['$<<'](",\n  // Hides the address bar on mobile devices\n  hideAddressBar: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_hideaddressbar", true)));
        _buf['$<<'](",\n  // Opens links in an iframe preview overlay\n  previewLinks: ".$freeze());
        _buf['$<<'](self.$to_boolean(self.$attr("revealjs_previewlinks", false)));
        _buf['$<<'](",\n  // Theme (e.g., beige, black, league, night, serif, simple, sky, solarized, white)\n  // NOTE setting the theme in the config no longer works in reveal.js 3.x\n  //theme: Reveal.getQueryHash().theme || '".$freeze());
        _buf['$<<'](self.$attr("revealjs_theme", "black"));
        _buf['$<<']("',\n  // Transition style (e.g., none, fade, slide, convex, concave, zoom)\n  transition: Reveal.getQueryHash().transition || '".$freeze());
        _buf['$<<'](self.$attr("revealjs_transition", "slide"));
        _buf['$<<']("',\n  // Transition speed (e.g., default, fast, slow)\n  transitionSpeed: '".$freeze());
        _buf['$<<'](self.$attr("revealjs_transitionspeed", "default"));
        _buf['$<<']("',\n  // Transition style for full page slide backgrounds (e.g., none, fade, slide, convex, concave, zoom)\n  backgroundTransition: '".$freeze());
        _buf['$<<'](self.$attr("revealjs_backgroundtransition", "fade"));
        _buf['$<<']("',\n  // Number of slides away from the current that are visible\n  viewDistance: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_viewdistance", 3));
        _buf['$<<'](",\n  // Parallax background image (e.g., \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\")\n  parallaxBackgroundImage: '".$freeze());
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundimage", ""));
        _buf['$<<']("',\n  // Parallax background size in CSS syntax (e.g., \"2100px 900px\")\n  parallaxBackgroundSize: '".$freeze());
        _buf['$<<'](self.$attr("revealjs_parallaxbackgroundsize", ""));
        _buf['$<<']("',\n\n  // The \"normal\" size of the presentation, aspect ratio will be preserved\n  // when the presentation is scaled to fit different resolutions. Can be\n  // specified using percentage units.\n  width: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_width", 960));
        _buf['$<<'](",\n  height: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_height", 700));
        _buf['$<<'](",\n\n  // Factor of the display size that should remain empty around the content\n  margin: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_margin", 0.1));
        _buf['$<<'](",\n\n  // Bounds for smallest/largest possible scale to apply to content\n  minScale: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_minscale", 0.2));
        _buf['$<<'](",\n  maxScale: ".$freeze());
        _buf['$<<'](self.$attr("revealjs_maxscale", 1.5));
        _buf['$<<'](",\n\n  // Optional libraries used to extend on reveal.js\n  dependencies: [\n      { src: '".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/lib/js/classList.js', condition: function() { return !document.body.classList; } },\n      { src: '".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n      { src: '".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n      ".$freeze());
        _buf['$<<']((function() {if ($truthy(self['$attr?']("source-highlighter", "highlightjs"))) {
          return "" + "{ src: '" + (revealjsdir) + "/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },"
          } else {
          return nil
        }; return nil; })());
        _buf['$<<']("\n      { src: '".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },\n      { src: '".$freeze());
        _buf['$<<'](revealjsdir);
        _buf['$<<']("/plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }\n  ]\n});</script>".$freeze());
        if ($truthy((docinfo_content = self.$docinfo("footer", ".html"))['$empty?']())) {
          } else {
          _buf['$<<'](docinfo_content)
        };
        _buf['$<<']("</body></html>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_76.$$s = self, TMP_76.$$arity = 0, TMP_76));
    }, TMP_Converter_document_78.$$arity = -2);
    
    Opal.defn(self, '$embedded', TMP_Converter_embedded_81 = function $$embedded(node, opts) {
      var TMP_79, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_79 = function(){var self = TMP_79.$$s || this, $a, TMP_80, _buf = nil, _slim_codeattributes1 = nil;
        if (self.id == null) self.id = nil;
        if (self.header == null) self.header = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(($truthy($a = self.$notitle()) ? $a : self['$has_header?']()['$!']()))) {
          } else {
          
          _buf['$<<']("<h1".$freeze());
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          _buf['$<<'](self.header.$title());
          _buf['$<<']("</h1>".$freeze());
        };
        _buf['$<<'](self.$content());
        if ($truthy(($truthy($a = self['$footnotes?']()['$!']()) ? $a : self['$attr?']("nofootnotes")))) {
          } else {
          
          _buf['$<<']("<div id=\"footnotes\"><hr>".$freeze());
          $send(self.$footnotes(), 'each', [], (TMP_80 = function(fn){var self = TMP_80.$$s || this;
if (fn == null) fn = nil;
          
            _buf['$<<']("<div class=\"footnote\" id=\"_footnote_".$freeze());
            _buf['$<<'](fn.$index());
            _buf['$<<']("\"><a href=\"#_footnoteref_".$freeze());
            _buf['$<<'](fn.$index());
            _buf['$<<']("\">".$freeze());
            _buf['$<<'](fn.$index());
            _buf['$<<']("</a>. ".$freeze());
            _buf['$<<'](fn.$text());
            return _buf['$<<']("</div>".$freeze());}, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80));
          _buf['$<<']("</div>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_79.$$s = self, TMP_79.$$arity = 0, TMP_79));
    }, TMP_Converter_embedded_81.$$arity = -2);
    
    Opal.defn(self, '$inline_anchor', TMP_Converter_inline_anchor_83 = function $$inline_anchor(node, opts) {
      var TMP_82, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_82 = function(){var self = TMP_82.$$s || this, $a, _buf = nil, $case = nil, refid = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil;
        if (self.type == null) self.type = nil;
        if (self.target == null) self.target = nil;
        if (self.text == null) self.text = nil;
        if (self.document == null) self.document = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        $case = self.type;
        if ("xref"['$===']($case)) {
        refid = ($truthy($a = self.$attr("refid")) ? $a : self.target);
        _buf['$<<']("<a".$freeze());
        _slim_codeattributes1 = self.target;
        if ($truthy(_slim_codeattributes1)) {
          if (_slim_codeattributes1['$=='](true)) {
            _buf['$<<'](" href".$freeze())
            } else {
            
            _buf['$<<'](" href=\"".$freeze());
            _buf['$<<'](_slim_codeattributes1);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](($truthy($a = self.text) ? $a : self.document.$references()['$[]']("ids").$fetch(refid, "" + "[" + (refid) + "]")).$tr_s("\n", " "));
        _buf['$<<']("</a>".$freeze());}
        else if ("ref"['$===']($case)) {
        _buf['$<<']("<a".$freeze());
        _slim_codeattributes2 = self.target;
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("></a>".$freeze());}
        else if ("bibref"['$===']($case)) {
        _buf['$<<']("<a".$freeze());
        _slim_codeattributes3 = self.target;
        if ($truthy(_slim_codeattributes3)) {
          if (_slim_codeattributes3['$=='](true)) {
            _buf['$<<'](" id".$freeze())
            } else {
            
            _buf['$<<'](" id=\"".$freeze());
            _buf['$<<'](_slim_codeattributes3);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<']("></a>[".$freeze());
        _buf['$<<'](self.target);
        _buf['$<<']("]".$freeze());}
        else {
        _buf['$<<']("<a".$freeze());
        _slim_codeattributes4 = self.target;
        if ($truthy(_slim_codeattributes4)) {
          if (_slim_codeattributes4['$=='](true)) {
            _buf['$<<'](" href".$freeze())
            } else {
            
            _buf['$<<'](" href=\"".$freeze());
            _buf['$<<'](_slim_codeattributes4);
            _buf['$<<']("\"".$freeze());
          }};
        _temple_html_attributeremover1 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes5.$to_s())
        };
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes6 = self.$attr("window");
        if ($truthy(_slim_codeattributes6)) {
          if (_slim_codeattributes6['$=='](true)) {
            _buf['$<<'](" target".$freeze())
            } else {
            
            _buf['$<<'](" target=\"".$freeze());
            _buf['$<<'](_slim_codeattributes6);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</a>".$freeze());};
        return (_buf = _buf.$join("".$freeze()));}, TMP_82.$$s = self, TMP_82.$$arity = 0, TMP_82));
    }, TMP_Converter_inline_anchor_83.$$arity = -2);
    
    Opal.defn(self, '$inline_break', TMP_Converter_inline_break_85 = function $$inline_break(node, opts) {
      var TMP_84, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_84 = function(){var self = TMP_84.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<'](self.text);
        _buf['$<<']("<br>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_84.$$s = self, TMP_84.$$arity = 0, TMP_84));
    }, TMP_Converter_inline_break_85.$$arity = -2);
    
    Opal.defn(self, '$inline_button', TMP_Converter_inline_button_87 = function $$inline_button(node, opts) {
      var TMP_86, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_86 = function(){var self = TMP_86.$$s || this, _buf = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<b class=\"button\">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</b>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_86.$$s = self, TMP_86.$$arity = 0, TMP_86));
    }, TMP_Converter_inline_button_87.$$arity = -2);
    
    Opal.defn(self, '$inline_callout', TMP_Converter_inline_callout_89 = function $$inline_callout(node, opts) {
      var TMP_88, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_88 = function(){var self = TMP_88.$$s || this, _buf = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil;
        if (self.document == null) self.document = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.document['$attr?']("icons", "font"))) {
          
          _buf['$<<']("<i class=\"conum\"".$freeze());
          _slim_codeattributes1 = self.text;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" data-value".$freeze())
              } else {
              
              _buf['$<<'](" data-value=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("></i><b>".$freeze());
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>".$freeze());
        } else if ($truthy(self.document['$attr?']("icons"))) {
          
          _buf['$<<']("<img".$freeze());
          _slim_codeattributes2 = self.$icon_uri("" + "callouts/" + (self.text));
          if ($truthy(_slim_codeattributes2)) {
            if (_slim_codeattributes2['$=='](true)) {
              _buf['$<<'](" src".$freeze())
              } else {
              
              _buf['$<<'](" src=\"".$freeze());
              _buf['$<<'](_slim_codeattributes2);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes3 = self.text;
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" alt".$freeze())
              } else {
              
              _buf['$<<'](" alt=\"".$freeze());
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          } else {
          
          _buf['$<<']("<b>".$freeze());
          _buf['$<<']("" + "(" + (self.text) + ")");
          _buf['$<<']("</b>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_88.$$s = self, TMP_88.$$arity = 0, TMP_88));
    }, TMP_Converter_inline_callout_89.$$arity = -2);
    
    Opal.defn(self, '$inline_footnote', TMP_Converter_inline_footnote_91 = function $$inline_footnote(node, opts) {
      var TMP_90, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_90 = function(){var self = TMP_90.$$s || this, _buf = nil, _slim_codeattributes1 = nil;
        if (self.type == null) self.type = nil;
        if (self.id == null) self.id = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("xref")) {
          
          _buf['$<<']("<span class=\"footnoteref\">[<a class=\"footnote\" href=\"#_footnote_".$freeze());
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">".$freeze());
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>".$freeze());
          } else {
          
          _buf['$<<']("<span class=\"footnote\"".$freeze());
          _slim_codeattributes1 = (function() {if ($truthy(self.id)) {
            return "" + "_footnote_" + (self.id)
            } else {
            return nil
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">[<a id=\"_footnoteref_".$freeze());
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" class=\"footnote\" href=\"#_footnote_".$freeze());
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("\" title=\"View footnote.\">".$freeze());
          _buf['$<<'](self.$attr("index"));
          _buf['$<<']("</a>]</span>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_90.$$s = self, TMP_90.$$arity = 0, TMP_90));
    }, TMP_Converter_inline_footnote_91.$$arity = -2);
    
    Opal.defn(self, '$inline_image', TMP_Converter_inline_image_93 = function $$inline_image(node, opts) {
      var TMP_92, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_92 = function(){var self = TMP_92.$$s || this, $a, _buf = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes1 = nil, _slim_codeattributes2 = nil, style_class = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, src = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_codeattributes15 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil;
        if (self.type == null) self.type = nil;
        if (self.document == null) self.document = nil;
        if (self.target == null) self.target = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _buf['$<<']("<span".$freeze());
        _temple_html_attributeremover1 = [];
        _slim_codeattributes1 = [self.type, self.$role()];
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes1))) {
          
          _slim_codeattributes1 = _slim_codeattributes1.$flatten();
          $send(_slim_codeattributes1, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes1, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes1.$to_s())
        };
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _slim_codeattributes2 = (function() {if ($truthy(self['$attr?']("float"))) {
          return "" + "float: " + (self.$attr("float"))
          } else {
          return nil
        }; return nil; })();
        if ($truthy(_slim_codeattributes2)) {
          if (_slim_codeattributes2['$=='](true)) {
            _buf['$<<'](" style".$freeze())
            } else {
            
            _buf['$<<'](" style=\"".$freeze());
            _buf['$<<'](_slim_codeattributes2);
            _buf['$<<']("\"".$freeze());
          }};
        _buf['$<<'](">".$freeze());
        if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons", "font") : self.type['$==']("icon")))) {
          
          style_class = ["" + "fa fa-" + (self.target)];
          if ($truthy(self['$attr?']("size"))) {
            style_class['$<<']("" + "fa-" + (self.$attr("size")))};
          if ($truthy(self['$attr?']("rotate"))) {
            style_class['$<<']("" + "fa-rotate-" + (self.$attr("rotate")))};
          if ($truthy(self['$attr?']("flip"))) {
            style_class['$<<']("" + "fa-flip-" + (self.$attr("flip")))};
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"".$freeze());
            _slim_codeattributes3 = self.$attr("link");
            if ($truthy(_slim_codeattributes3)) {
              if (_slim_codeattributes3['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes3);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes4 = self.$attr("window");
            if ($truthy(_slim_codeattributes4)) {
              if (_slim_codeattributes4['$=='](true)) {
                _buf['$<<'](" target".$freeze())
                } else {
                
                _buf['$<<'](" target=\"".$freeze());
                _buf['$<<'](_slim_codeattributes4);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("><i".$freeze());
            _temple_html_attributeremover2 = [];
            _slim_codeattributes5 = style_class;
            if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes5))) {
              
              _slim_codeattributes5 = _slim_codeattributes5.$flatten();
              $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover2['$<<'](_slim_codeattributes5.$join(" ").$to_s());
              } else {
              _temple_html_attributeremover2['$<<'](_slim_codeattributes5.$to_s())
            };
            _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
            if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"".$freeze());
              _buf['$<<'](_temple_html_attributeremover2);
              _buf['$<<']("\"".$freeze());};
            _slim_codeattributes6 = self.$attr("title");
            if ($truthy(_slim_codeattributes6)) {
              if (_slim_codeattributes6['$=='](true)) {
                _buf['$<<'](" title".$freeze())
                } else {
                
                _buf['$<<'](" title=\"".$freeze());
                _buf['$<<'](_slim_codeattributes6);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("></i></a>".$freeze());
            } else {
            
            _buf['$<<']("<i".$freeze());
            _temple_html_attributeremover3 = [];
            _slim_codeattributes7 = style_class;
            if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes7))) {
              
              _slim_codeattributes7 = _slim_codeattributes7.$flatten();
              $send(_slim_codeattributes7, 'map!', [], "to_s".$to_proc());
              $send(_slim_codeattributes7, 'reject!', [], "empty?".$to_proc());
              _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$join(" ").$to_s());
              } else {
              _temple_html_attributeremover3['$<<'](_slim_codeattributes7.$to_s())
            };
            _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
            if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
              
              _buf['$<<'](" class=\"".$freeze());
              _buf['$<<'](_temple_html_attributeremover3);
              _buf['$<<']("\"".$freeze());};
            _slim_codeattributes8 = self.$attr("title");
            if ($truthy(_slim_codeattributes8)) {
              if (_slim_codeattributes8['$=='](true)) {
                _buf['$<<'](" title".$freeze())
                } else {
                
                _buf['$<<'](" title=\"".$freeze());
                _buf['$<<'](_slim_codeattributes8);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("></i>".$freeze());
          };
        } else if ($truthy((($a = self.type['$==']("icon")) ? self.document['$attr?']("icons")['$!']() : self.type['$==']("icon")))) {
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"".$freeze());
            _slim_codeattributes9 = self.$attr("link");
            if ($truthy(_slim_codeattributes9)) {
              if (_slim_codeattributes9['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes9);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes10 = self.$attr("window");
            if ($truthy(_slim_codeattributes10)) {
              if (_slim_codeattributes10['$=='](true)) {
                _buf['$<<'](" target".$freeze())
                } else {
                
                _buf['$<<'](" target=\"".$freeze());
                _buf['$<<'](_slim_codeattributes10);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">[".$freeze());
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]</a>".$freeze());
            } else {
            
            _buf['$<<']("[".$freeze());
            _buf['$<<'](self.$attr("alt"));
            _buf['$<<']("]".$freeze());
          }
          } else {
          
          src = (function() {if (self.type['$==']("icon")) {
            
            return self.$icon_uri(self.target);
            } else {
            
            return self.$image_uri(self.target);
          }; return nil; })();
          if ($truthy(self['$attr?']("link"))) {
            
            _buf['$<<']("<a class=\"image\"".$freeze());
            _slim_codeattributes11 = self.$attr("link");
            if ($truthy(_slim_codeattributes11)) {
              if (_slim_codeattributes11['$=='](true)) {
                _buf['$<<'](" href".$freeze())
                } else {
                
                _buf['$<<'](" href=\"".$freeze());
                _buf['$<<'](_slim_codeattributes11);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes12 = self.$attr("window");
            if ($truthy(_slim_codeattributes12)) {
              if (_slim_codeattributes12['$=='](true)) {
                _buf['$<<'](" target".$freeze())
                } else {
                
                _buf['$<<'](" target=\"".$freeze());
                _buf['$<<'](_slim_codeattributes12);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("><img".$freeze());
            _slim_codeattributes13 = src;
            if ($truthy(_slim_codeattributes13)) {
              if (_slim_codeattributes13['$=='](true)) {
                _buf['$<<'](" src".$freeze())
                } else {
                
                _buf['$<<'](" src=\"".$freeze());
                _buf['$<<'](_slim_codeattributes13);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes14 = self.$attr("alt");
            if ($truthy(_slim_codeattributes14)) {
              if (_slim_codeattributes14['$=='](true)) {
                _buf['$<<'](" alt".$freeze())
                } else {
                
                _buf['$<<'](" alt=\"".$freeze());
                _buf['$<<'](_slim_codeattributes14);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes15 = self.$attr("width");
            if ($truthy(_slim_codeattributes15)) {
              if (_slim_codeattributes15['$=='](true)) {
                _buf['$<<'](" width".$freeze())
                } else {
                
                _buf['$<<'](" width=\"".$freeze());
                _buf['$<<'](_slim_codeattributes15);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes16 = self.$attr("height");
            if ($truthy(_slim_codeattributes16)) {
              if (_slim_codeattributes16['$=='](true)) {
                _buf['$<<'](" height".$freeze())
                } else {
                
                _buf['$<<'](" height=\"".$freeze());
                _buf['$<<'](_slim_codeattributes16);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes17 = self.$attr("title");
            if ($truthy(_slim_codeattributes17)) {
              if (_slim_codeattributes17['$=='](true)) {
                _buf['$<<'](" title".$freeze())
                } else {
                
                _buf['$<<'](" title=\"".$freeze());
                _buf['$<<'](_slim_codeattributes17);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<']("></a>".$freeze());
            } else {
            
            _buf['$<<']("<img".$freeze());
            _slim_codeattributes18 = src;
            if ($truthy(_slim_codeattributes18)) {
              if (_slim_codeattributes18['$=='](true)) {
                _buf['$<<'](" src".$freeze())
                } else {
                
                _buf['$<<'](" src=\"".$freeze());
                _buf['$<<'](_slim_codeattributes18);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes19 = self.$attr("alt");
            if ($truthy(_slim_codeattributes19)) {
              if (_slim_codeattributes19['$=='](true)) {
                _buf['$<<'](" alt".$freeze())
                } else {
                
                _buf['$<<'](" alt=\"".$freeze());
                _buf['$<<'](_slim_codeattributes19);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes20 = self.$attr("width");
            if ($truthy(_slim_codeattributes20)) {
              if (_slim_codeattributes20['$=='](true)) {
                _buf['$<<'](" width".$freeze())
                } else {
                
                _buf['$<<'](" width=\"".$freeze());
                _buf['$<<'](_slim_codeattributes20);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes21 = self.$attr("height");
            if ($truthy(_slim_codeattributes21)) {
              if (_slim_codeattributes21['$=='](true)) {
                _buf['$<<'](" height".$freeze())
                } else {
                
                _buf['$<<'](" height=\"".$freeze());
                _buf['$<<'](_slim_codeattributes21);
                _buf['$<<']("\"".$freeze());
              }};
            _slim_codeattributes22 = self.$attr("title");
            if ($truthy(_slim_codeattributes22)) {
              if (_slim_codeattributes22['$=='](true)) {
                _buf['$<<'](" title".$freeze())
                } else {
                
                _buf['$<<'](" title=\"".$freeze());
                _buf['$<<'](_slim_codeattributes22);
                _buf['$<<']("\"".$freeze());
              }};
            _buf['$<<'](">".$freeze());
          };
        };
        _buf['$<<']("</span>".$freeze());
        return (_buf = _buf.$join("".$freeze()));}, TMP_92.$$s = self, TMP_92.$$arity = 0, TMP_92));
    }, TMP_Converter_inline_image_93.$$arity = -2);
    
    Opal.defn(self, '$inline_indexterm', TMP_Converter_inline_indexterm_95 = function $$inline_indexterm(node, opts) {
      var TMP_94, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_94 = function(){var self = TMP_94.$$s || this, _buf = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if (self.type['$==']("visible")) {
          _buf['$<<'](self.text)};
        return (_buf = _buf.$join("".$freeze()));}, TMP_94.$$s = self, TMP_94.$$arity = 0, TMP_94));
    }, TMP_Converter_inline_indexterm_95.$$arity = -2);
    
    Opal.defn(self, '$inline_kbd', TMP_Converter_inline_kbd_98 = function $$inline_kbd(node, opts) {
      var TMP_96, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_96 = function(){var self = TMP_96.$$s || this, TMP_97, _buf = nil, keys = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ((keys = self.$attr("keys")).$size()['$=='](1)) {
          
          _buf['$<<']("<kbd>".$freeze());
          _buf['$<<'](keys.$first());
          _buf['$<<']("</kbd>".$freeze());
          } else {
          
          _buf['$<<']("<span class=\"keyseq\">".$freeze());
          $send(keys, 'each_with_index', [], (TMP_97 = function(key, idx){var self = TMP_97.$$s || this;
if (key == null) key = nil;if (idx == null) idx = nil;
          
            if ($truthy(idx['$zero?']())) {
              } else {
              _buf['$<<']("+".$freeze())
            };
            _buf['$<<']("<kbd>".$freeze());
            _buf['$<<'](key);
            return _buf['$<<']("</kbd>".$freeze());}, TMP_97.$$s = self, TMP_97.$$arity = 2, TMP_97));
          _buf['$<<']("</span>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_96.$$s = self, TMP_96.$$arity = 0, TMP_96));
    }, TMP_Converter_inline_kbd_98.$$arity = -2);
    
    Opal.defn(self, '$inline_menu', TMP_Converter_inline_menu_101 = function $$inline_menu(node, opts) {
      var TMP_99, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_99 = function(){var self = TMP_99.$$s || this, TMP_100, _buf = nil, menu = nil, menuitem = nil, submenus = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        menu = self.$attr("menu");
        menuitem = self.$attr("menuitem");
        if ($truthy((submenus = self.$attr("submenus"))['$empty?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">".$freeze());
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;".$freeze());
          _buf['$<<']($send(submenus, 'map', [], (TMP_100 = function(submenu){var self = TMP_100.$$s || this;
if (submenu == null) submenu = nil;
          return "" + "<span class=\"submenu\">" + (submenu) + "</span>&#160;&#9656;&#32;"}, TMP_100.$$s = self, TMP_100.$$arity = 1, TMP_100)).$join());
          _buf['$<<']("<span class=\"menuitem\">".$freeze());
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>".$freeze());
        } else if ($truthy(menuitem['$nil?']()['$!']())) {
          
          _buf['$<<']("<span class=\"menuseq\"><span class=\"menu\">".$freeze());
          _buf['$<<'](menu);
          _buf['$<<']("</span>&#160;&#9656;&#32;<span class=\"menuitem\">".$freeze());
          _buf['$<<'](menuitem);
          _buf['$<<']("</span></span>".$freeze());
          } else {
          
          _buf['$<<']("<span class=\"menu\">".$freeze());
          _buf['$<<'](menu);
          _buf['$<<']("</span>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_99.$$s = self, TMP_99.$$arity = 0, TMP_99));
    }, TMP_Converter_inline_menu_101.$$arity = -2);
    
    Opal.defn(self, '$inline_quoted', TMP_Converter_inline_quoted_103 = function $$inline_quoted(node, opts) {
      var TMP_102, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_102 = function(){var self = TMP_102.$$s || this, $a, $b, _buf = nil, _slim_codeattributes1 = nil, $case = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes3 = nil, _temple_html_attributeremover3 = nil, _slim_codeattributes4 = nil, _temple_html_attributeremover4 = nil, _slim_codeattributes5 = nil, _temple_html_attributeremover5 = nil, _slim_codeattributes6 = nil, open = nil, close = nil;
        if (self.id == null) self.id = nil;
        if (self.type == null) self.type = nil;
        if (self.text == null) self.text = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        if ($truthy(self.id['$nil?']())) {
          } else {
          
          _buf['$<<']("<a".$freeze());
          _slim_codeattributes1 = self.id;
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<']("></a>".$freeze());
        };
        $case = self.type;
        if ("emphasis"['$===']($case)) {
        _buf['$<<']("<em".$freeze());
        _temple_html_attributeremover1 = [];
        _slim_codeattributes2 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes2))) {
          
          _slim_codeattributes2 = _slim_codeattributes2.$flatten();
          $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$to_s())
        };
        _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
        if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover1);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</em>".$freeze());}
        else if ("strong"['$===']($case)) {
        _buf['$<<']("<strong".$freeze());
        _temple_html_attributeremover2 = [];
        _slim_codeattributes3 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes3))) {
          
          _slim_codeattributes3 = _slim_codeattributes3.$flatten();
          $send(_slim_codeattributes3, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes3, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover2['$<<'](_slim_codeattributes3.$to_s())
        };
        _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
        if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover2);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</strong>".$freeze());}
        else if ("monospaced"['$===']($case)) {
        _buf['$<<']("<code".$freeze());
        _temple_html_attributeremover3 = [];
        _slim_codeattributes4 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes4))) {
          
          _slim_codeattributes4 = _slim_codeattributes4.$flatten();
          $send(_slim_codeattributes4, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes4, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover3['$<<'](_slim_codeattributes4.$to_s())
        };
        _temple_html_attributeremover3 = $rb_times(_temple_html_attributeremover3, "");
        if ($truthy(_temple_html_attributeremover3['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover3);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</code>".$freeze());}
        else if ("superscript"['$===']($case)) {
        _buf['$<<']("<sup".$freeze());
        _temple_html_attributeremover4 = [];
        _slim_codeattributes5 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes5))) {
          
          _slim_codeattributes5 = _slim_codeattributes5.$flatten();
          $send(_slim_codeattributes5, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes5, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover4['$<<'](_slim_codeattributes5.$to_s())
        };
        _temple_html_attributeremover4 = $rb_times(_temple_html_attributeremover4, "");
        if ($truthy(_temple_html_attributeremover4['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover4);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</sup>".$freeze());}
        else if ("subscript"['$===']($case)) {
        _buf['$<<']("<sub".$freeze());
        _temple_html_attributeremover5 = [];
        _slim_codeattributes6 = self.$role();
        if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes6))) {
          
          _slim_codeattributes6 = _slim_codeattributes6.$flatten();
          $send(_slim_codeattributes6, 'map!', [], "to_s".$to_proc());
          $send(_slim_codeattributes6, 'reject!', [], "empty?".$to_proc());
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6.$join(" ").$to_s());
          } else {
          _temple_html_attributeremover5['$<<'](_slim_codeattributes6.$to_s())
        };
        _temple_html_attributeremover5 = $rb_times(_temple_html_attributeremover5, "");
        if ($truthy(_temple_html_attributeremover5['$empty?']()['$!']())) {
          
          _buf['$<<'](" class=\"".$freeze());
          _buf['$<<'](_temple_html_attributeremover5);
          _buf['$<<']("\"".$freeze());};
        _buf['$<<'](">".$freeze());
        _buf['$<<'](self.text);
        _buf['$<<']("</sub>".$freeze());}
        else if ("double"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8220;" + (self.text) + "&#8221;</span>"
          } else {
          return "" + "&#8220;" + (self.text) + "&#8221;"
        }; return nil; })())}
        else if ("single"['$===']($case)) {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">&#8216;" + (self.text) + "&#8217;</span>"
          } else {
          return "" + "&#8216;" + (self.text) + "&#8217;"
        }; return nil; })())}
        else if ("asciimath"['$===']($case) || "latexmath"['$===']($case)) {
        $b = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'INLINE_MATH_DELIMITERS')['$[]'](self.type), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;
        _buf['$<<'](open);
        _buf['$<<'](self.text);
        _buf['$<<'](close);}
        else {_buf['$<<']((function() {if ($truthy(self['$role?']())) {
          return "" + "<span class=\"" + (self.$role()) + "\">" + (self.text) + "</span>"
          } else {
          return self.text
        }; return nil; })())};
        return (_buf = _buf.$join("".$freeze()));}, TMP_102.$$s = self, TMP_102.$$arity = 0, TMP_102));
    }, TMP_Converter_inline_quoted_103.$$arity = -2);
    
    Opal.defn(self, '$section', TMP_Converter_section_110 = function $$section(node, opts) {
      var TMP_104, self = this;

      if (opts == null) {
        opts = $hash2([], {});
      }
      
      node.$extend(Opal.const_get_relative($nesting, 'Helpers'));
      return $send(node, 'instance_eval', [], (TMP_104 = function(){var self = TMP_104.$$s || this, $a, $b, TMP_105, TMP_106, TMP_108, TMP_109, _buf = nil, _id = nil, titleless = nil, title = nil, hide_title = nil, vertical_slides = nil, data_background_image = nil, data_background_size = nil, data_background_repeat = nil, data_background_transition = nil, section_images = nil, bg_image = nil, data_background_color = nil, _slim_codeattributes1 = nil, _temple_html_attributeremover1 = nil, _slim_codeattributes2 = nil, _slim_codeattributes3 = nil, _slim_codeattributes4 = nil, _slim_codeattributes5 = nil, _slim_codeattributes6 = nil, _slim_codeattributes7 = nil, _slim_codeattributes8 = nil, _slim_codeattributes9 = nil, _slim_codeattributes10 = nil, _slim_codeattributes11 = nil, _slim_codeattributes12 = nil, _slim_codeattributes13 = nil, _slim_codeattributes14 = nil, _slim_htag_filter1 = nil, _slim_codeattributes15 = nil, _temple_html_attributeremover2 = nil, _slim_codeattributes16 = nil, _slim_codeattributes17 = nil, _slim_codeattributes18 = nil, _slim_codeattributes19 = nil, _slim_codeattributes20 = nil, _slim_codeattributes21 = nil, _slim_codeattributes22 = nil, _slim_codeattributes23 = nil, _slim_codeattributes24 = nil, _slim_codeattributes25 = nil, _slim_codeattributes26 = nil, _slim_codeattributes27 = nil, _slim_codeattributes28 = nil;
        if (self.level == null) self.level = nil;

      
        if ($truthy(opts['$empty?']())) {
          } else {
          self.$converter().$set_local_variables(self.$binding(), opts)
        };
        _buf = [];
        _id = self.$id().$gsub(/[^a-zA-Z0-9\-\_\:\.]/, "");
        titleless = (title = self.$title())['$==']("!");
        hide_title = ($truthy($a = ($truthy($b = titleless) ? $b : self['$option?']("notitle"))) ? $a : self['$option?']("conceal"));
        vertical_slides = $send(self, 'find_by', [$hash2(["context"], {"context": "section"})], (TMP_105 = function(section){var self = TMP_105.$$s || this;
if (section == null) section = nil;
        return section.$level()['$=='](2)}, TMP_105.$$s = self, TMP_105.$$arity = 1, TMP_105));
        $b = nil, $a = Opal.to_ary($b), (data_background_image = ($a[0] == null ? nil : $a[0])), (data_background_size = ($a[1] == null ? nil : $a[1])), (data_background_repeat = ($a[2] == null ? nil : $a[2])), (data_background_transition = ($a[3] == null ? nil : $a[3])), $b;
        section_images = $send(self.$blocks(), 'map', [], (TMP_106 = function(block){var self = TMP_106.$$s || this, $c, TMP_107, ctx = nil;
if (block == null) block = nil;
        if ((ctx = block.$context())['$==']("image")) {
            if ($truthy(["background", "canvas"]['$include?'](block.$attr(1)))) {
              return block
              } else {
              return []
            }
          } else if (ctx['$==']("section")) {
            return []
            } else {
            return ($truthy($c = $send(block, 'find_by', [$hash2(["context"], {"context": "image"})], (TMP_107 = function(image){var self = TMP_107.$$s || this;
if (image == null) image = nil;
            return ["background", "canvas"]['$include?'](image.$attr(1))}, TMP_107.$$s = self, TMP_107.$$arity = 1, TMP_107))) ? $c : [])
          }}, TMP_106.$$s = self, TMP_106.$$arity = 1, TMP_106));
        if ($truthy((bg_image = section_images.$flatten().$first()))) {
          
          data_background_image = self.$image_uri(bg_image.$attr("target"));
          data_background_size = bg_image.$attr("size");
          data_background_repeat = bg_image.$attr("repeat");
          data_background_transition = bg_image.$attr("transition");};
        if ($truthy(self['$attr?']("background-image"))) {
          data_background_image = self.$image_uri(self.$attr("background-image"))};
        if ($truthy(self['$attr?']("background-color"))) {
          data_background_color = self.$attr("background-color")};
        if ($truthy((($a = self.level['$=='](1)) ? vertical_slides['$empty?']()['$!']() : self.level['$=='](1)))) {
          
          _buf['$<<']("<section><section".$freeze());
          _slim_codeattributes1 = (function() {if ($truthy(titleless)) {
            return nil
            } else {
            return _id
          }; return nil; })();
          if ($truthy(_slim_codeattributes1)) {
            if (_slim_codeattributes1['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes1);
              _buf['$<<']("\"".$freeze());
            }};
          _temple_html_attributeremover1 = [];
          _slim_codeattributes2 = self.$roles();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes2))) {
            
            _slim_codeattributes2 = _slim_codeattributes2.$flatten();
            $send(_slim_codeattributes2, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes2, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover1['$<<'](_slim_codeattributes2.$to_s())
          };
          _temple_html_attributeremover1 = $rb_times(_temple_html_attributeremover1, "");
          if ($truthy(_temple_html_attributeremover1['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover1);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes3 = self.$attr("transition");
          if ($truthy(_slim_codeattributes3)) {
            if (_slim_codeattributes3['$=='](true)) {
              _buf['$<<'](" data-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes3);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes4 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes4)) {
            if (_slim_codeattributes4['$=='](true)) {
              _buf['$<<'](" data-transition-speed".$freeze())
              } else {
              
              _buf['$<<'](" data-transition-speed=\"".$freeze());
              _buf['$<<'](_slim_codeattributes4);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes5 = data_background_color;
          if ($truthy(_slim_codeattributes5)) {
            if (_slim_codeattributes5['$=='](true)) {
              _buf['$<<'](" data-background-color".$freeze())
              } else {
              
              _buf['$<<'](" data-background-color=\"".$freeze());
              _buf['$<<'](_slim_codeattributes5);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes6 = data_background_image;
          if ($truthy(_slim_codeattributes6)) {
            if (_slim_codeattributes6['$=='](true)) {
              _buf['$<<'](" data-background-image".$freeze())
              } else {
              
              _buf['$<<'](" data-background-image=\"".$freeze());
              _buf['$<<'](_slim_codeattributes6);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes7 = ($truthy($a = data_background_size) ? $a : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes7)) {
            if (_slim_codeattributes7['$=='](true)) {
              _buf['$<<'](" data-background-size".$freeze())
              } else {
              
              _buf['$<<'](" data-background-size=\"".$freeze());
              _buf['$<<'](_slim_codeattributes7);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes8 = ($truthy($a = data_background_repeat) ? $a : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes8)) {
            if (_slim_codeattributes8['$=='](true)) {
              _buf['$<<'](" data-background-repeat".$freeze())
              } else {
              
              _buf['$<<'](" data-background-repeat=\"".$freeze());
              _buf['$<<'](_slim_codeattributes8);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes9 = ($truthy($a = data_background_transition) ? $a : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes9)) {
            if (_slim_codeattributes9['$=='](true)) {
              _buf['$<<'](" data-background-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-background-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes9);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes10 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes10)) {
            if (_slim_codeattributes10['$=='](true)) {
              _buf['$<<'](" data-background-iframe".$freeze())
              } else {
              
              _buf['$<<'](" data-background-iframe=\"".$freeze());
              _buf['$<<'](_slim_codeattributes10);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes11 = self.$attr("background-video");
          if ($truthy(_slim_codeattributes11)) {
            if (_slim_codeattributes11['$=='](true)) {
              _buf['$<<'](" data-background-video".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video=\"".$freeze());
              _buf['$<<'](_slim_codeattributes11);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes12 = ($truthy($a = self['$attr?']("background-video-loop")) ? $a : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes12)) {
            if (_slim_codeattributes12['$=='](true)) {
              _buf['$<<'](" data-background-video-loop".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-loop=\"".$freeze());
              _buf['$<<'](_slim_codeattributes12);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes13 = ($truthy($a = self['$attr?']("background-video-muted")) ? $a : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes13)) {
            if (_slim_codeattributes13['$=='](true)) {
              _buf['$<<'](" data-background-video-muted".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-muted=\"".$freeze());
              _buf['$<<'](_slim_codeattributes13);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes14 = self.$attr("state");
          if ($truthy(_slim_codeattributes14)) {
            if (_slim_codeattributes14['$=='](true)) {
              _buf['$<<'](" data-state".$freeze())
              } else {
              
              _buf['$<<'](" data-state=\"".$freeze());
              _buf['$<<'](_slim_codeattributes14);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          if ($truthy(hide_title)) {
            } else {
            
            _buf['$<<']("<h2>".$freeze());
            _buf['$<<'](title);
            _buf['$<<']("</h2>".$freeze());
          };
          $send($rb_minus(self.$blocks(), vertical_slides), 'each', [], (TMP_108 = function(block){var self = TMP_108.$$s || this;
if (block == null) block = nil;
          return _buf['$<<'](block.$convert())}, TMP_108.$$s = self, TMP_108.$$arity = 1, TMP_108));
          _buf['$<<']("</section>".$freeze());
          $send(vertical_slides, 'each', [], (TMP_109 = function(subsection){var self = TMP_109.$$s || this;
if (subsection == null) subsection = nil;
          return _buf['$<<'](subsection.$convert())}, TMP_109.$$s = self, TMP_109.$$arity = 1, TMP_109));
          _buf['$<<']("</section>".$freeze());
        } else if ($truthy($rb_ge(self.level, 3))) {
          
          _slim_htag_filter1 = self.level.$to_s();
          _buf['$<<']("<h".$freeze());
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">".$freeze());
          _buf['$<<'](title);
          _buf['$<<']("</h".$freeze());
          _buf['$<<'](_slim_htag_filter1);
          _buf['$<<'](">".$freeze());
          _buf['$<<'](self.$content().$chomp());
          } else {
          
          _buf['$<<']("<section".$freeze());
          _slim_codeattributes15 = (function() {if ($truthy(titleless)) {
            return nil
            } else {
            return _id
          }; return nil; })();
          if ($truthy(_slim_codeattributes15)) {
            if (_slim_codeattributes15['$=='](true)) {
              _buf['$<<'](" id".$freeze())
              } else {
              
              _buf['$<<'](" id=\"".$freeze());
              _buf['$<<'](_slim_codeattributes15);
              _buf['$<<']("\"".$freeze());
            }};
          _temple_html_attributeremover2 = [];
          _slim_codeattributes16 = self.$roles();
          if ($truthy(Opal.const_get_relative($nesting, 'Array')['$==='](_slim_codeattributes16))) {
            
            _slim_codeattributes16 = _slim_codeattributes16.$flatten();
            $send(_slim_codeattributes16, 'map!', [], "to_s".$to_proc());
            $send(_slim_codeattributes16, 'reject!', [], "empty?".$to_proc());
            _temple_html_attributeremover2['$<<'](_slim_codeattributes16.$join(" ").$to_s());
            } else {
            _temple_html_attributeremover2['$<<'](_slim_codeattributes16.$to_s())
          };
          _temple_html_attributeremover2 = $rb_times(_temple_html_attributeremover2, "");
          if ($truthy(_temple_html_attributeremover2['$empty?']()['$!']())) {
            
            _buf['$<<'](" class=\"".$freeze());
            _buf['$<<'](_temple_html_attributeremover2);
            _buf['$<<']("\"".$freeze());};
          _slim_codeattributes17 = self.$attr("transition");
          if ($truthy(_slim_codeattributes17)) {
            if (_slim_codeattributes17['$=='](true)) {
              _buf['$<<'](" data-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes17);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes18 = self.$attr("transition-speed");
          if ($truthy(_slim_codeattributes18)) {
            if (_slim_codeattributes18['$=='](true)) {
              _buf['$<<'](" data-transition-speed".$freeze())
              } else {
              
              _buf['$<<'](" data-transition-speed=\"".$freeze());
              _buf['$<<'](_slim_codeattributes18);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes19 = data_background_color;
          if ($truthy(_slim_codeattributes19)) {
            if (_slim_codeattributes19['$=='](true)) {
              _buf['$<<'](" data-background-color".$freeze())
              } else {
              
              _buf['$<<'](" data-background-color=\"".$freeze());
              _buf['$<<'](_slim_codeattributes19);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes20 = data_background_image;
          if ($truthy(_slim_codeattributes20)) {
            if (_slim_codeattributes20['$=='](true)) {
              _buf['$<<'](" data-background-image".$freeze())
              } else {
              
              _buf['$<<'](" data-background-image=\"".$freeze());
              _buf['$<<'](_slim_codeattributes20);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes21 = ($truthy($a = data_background_size) ? $a : self.$attr("background-size"));
          if ($truthy(_slim_codeattributes21)) {
            if (_slim_codeattributes21['$=='](true)) {
              _buf['$<<'](" data-background-size".$freeze())
              } else {
              
              _buf['$<<'](" data-background-size=\"".$freeze());
              _buf['$<<'](_slim_codeattributes21);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes22 = ($truthy($a = data_background_repeat) ? $a : self.$attr("background-repeat"));
          if ($truthy(_slim_codeattributes22)) {
            if (_slim_codeattributes22['$=='](true)) {
              _buf['$<<'](" data-background-repeat".$freeze())
              } else {
              
              _buf['$<<'](" data-background-repeat=\"".$freeze());
              _buf['$<<'](_slim_codeattributes22);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes23 = ($truthy($a = data_background_transition) ? $a : self.$attr("background-transition"));
          if ($truthy(_slim_codeattributes23)) {
            if (_slim_codeattributes23['$=='](true)) {
              _buf['$<<'](" data-background-transition".$freeze())
              } else {
              
              _buf['$<<'](" data-background-transition=\"".$freeze());
              _buf['$<<'](_slim_codeattributes23);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes24 = self.$attr("background-iframe");
          if ($truthy(_slim_codeattributes24)) {
            if (_slim_codeattributes24['$=='](true)) {
              _buf['$<<'](" data-background-iframe".$freeze())
              } else {
              
              _buf['$<<'](" data-background-iframe=\"".$freeze());
              _buf['$<<'](_slim_codeattributes24);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes25 = self.$attr("background-video");
          if ($truthy(_slim_codeattributes25)) {
            if (_slim_codeattributes25['$=='](true)) {
              _buf['$<<'](" data-background-video".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video=\"".$freeze());
              _buf['$<<'](_slim_codeattributes25);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes26 = ($truthy($a = self['$attr?']("background-video-loop")) ? $a : self['$option?']("loop"));
          if ($truthy(_slim_codeattributes26)) {
            if (_slim_codeattributes26['$=='](true)) {
              _buf['$<<'](" data-background-video-loop".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-loop=\"".$freeze());
              _buf['$<<'](_slim_codeattributes26);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes27 = ($truthy($a = self['$attr?']("background-video-muted")) ? $a : self['$option?']("muted"));
          if ($truthy(_slim_codeattributes27)) {
            if (_slim_codeattributes27['$=='](true)) {
              _buf['$<<'](" data-background-video-muted".$freeze())
              } else {
              
              _buf['$<<'](" data-background-video-muted=\"".$freeze());
              _buf['$<<'](_slim_codeattributes27);
              _buf['$<<']("\"".$freeze());
            }};
          _slim_codeattributes28 = self.$attr("state");
          if ($truthy(_slim_codeattributes28)) {
            if (_slim_codeattributes28['$=='](true)) {
              _buf['$<<'](" data-state".$freeze())
              } else {
              
              _buf['$<<'](" data-state=\"".$freeze());
              _buf['$<<'](_slim_codeattributes28);
              _buf['$<<']("\"".$freeze());
            }};
          _buf['$<<'](">".$freeze());
          if ($truthy(hide_title)) {
            } else {
            
            _buf['$<<']("<h2>".$freeze());
            _buf['$<<'](title);
            _buf['$<<']("</h2>".$freeze());
          };
          _buf['$<<'](self.$content().$chomp());
          _buf['$<<']("</section>".$freeze());
        };
        return (_buf = _buf.$join("".$freeze()));}, TMP_104.$$s = self, TMP_104.$$arity = 0, TMP_104));
    }, TMP_Converter_section_110.$$arity = -2);
    return (Opal.defn(self, '$set_local_variables', TMP_Converter_set_local_variables_112 = function $$set_local_variables(binding, vars) {
      var TMP_111, self = this;

      return $send(vars, 'each', [], (TMP_111 = function(key, val){var self = TMP_111.$$s || this;
if (key == null) key = nil;if (val == null) val = nil;
      return binding.$local_variable_set(key.$to_sym(), val)}, TMP_111.$$s = self, TMP_111.$$arity = 2, TMP_111))
    }, TMP_Converter_set_local_variables_112.$$arity = 2), nil) && 'set_local_variables';
  })(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Asciidoctor'), 'Revealjs'), Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Asciidoctor'), 'Converter'), 'Base'), $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    return self.$require("asciidoctor-revealjs/converter")
    } else {
    return nil
  }
})(Opal);
