/* Generated by Opal 0.11.0.rc1 */
Opal.modules["asciidoctor-revealjs/converter"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$==', '$register_for', '$[]', '$+', '$map', '$expand_path', '$new', '$merge', '$basebackend', '$htmlsyntax']);
  
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  return (function($base, $parent_nesting) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var $Revealjs, self = $Revealjs = $module($base, 'Revealjs');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        function $Converter(){};
        var self = $Converter = $klass($base, $super, 'Converter', $Converter);

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Converter_initialize_2;

        
        Opal.const_set($nesting[0], 'ProvidedTemplatesDir', (function() {if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          return "node_modules/asciidoctor-reveal.js/templates"
          } else {
          return nil
        }; return nil; })());
        self.$register_for("revealjs");
        return (Opal.defn(self, '$initialize', TMP_Converter_initialize_2 = function $$initialize(backend, opts) {
          var TMP_1, self = this, $iter = TMP_Converter_initialize_2.$$p, $yield = $iter || nil, template_dirs = nil, user_template_dirs = nil, template_engine = nil, template_converter = nil, html5_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          if ($iter) TMP_Converter_initialize_2.$$p = null;
          
          template_dirs = [Opal.const_get_relative($nesting, 'ProvidedTemplatesDir')];
          if ($truthy((user_template_dirs = opts['$[]']("template_dirs")))) {
            template_dirs = $rb_plus(template_dirs, $send(user_template_dirs, 'map', [], (TMP_1 = function(d){var self = TMP_1.$$s || this;
if (d == null) d = nil;
            return Opal.const_get_qualified('::', 'File').$expand_path(d)}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1)))};
          if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            template_engine = "jade"
            } else {
            nil
          };
          template_converter = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Asciidoctor'), 'Converter'), 'TemplateConverter').$new(backend, template_dirs, opts.$merge($hash2(["htmlsyntax", "template_engine"], {"htmlsyntax": "html", "template_engine": template_engine})));
          html5_converter = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Asciidoctor'), 'Converter'), 'Html5Converter').$new(backend, opts);
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Converter_initialize_2, false), [backend, template_converter, html5_converter], null);
          self.$basebackend("html");
          return self.$htmlsyntax("html");
        }, TMP_Converter_initialize_2.$$arity = -2), nil) && 'initialize';
      })($nesting[0], Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified('::', 'Asciidoctor'), 'Converter'), 'CompositeConverter'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 0.11.0.rc1 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    
    self.$require("asciidoctor-revealjs/converter");
    return require('asciidoctor-template.js');
    } else {
    return nil
  }
})(Opal);
