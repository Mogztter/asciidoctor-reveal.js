#!/usr/bin/env node

'use strict'

process.title = 'asciidoctor-revealjs'

const pkg = require('../package.json')
const { Options, Invoker, processor } = require('@asciidoctor/cli')
const asciidoctor = require('@asciidoctor/core')();
const asciidoctorRevealjs = require('@asciidoctor/reveal.js')
const path = require('path')
const EventEmitter = require('events')
class ProcessorEmitter extends EventEmitter {}
const processorEmitter = new ProcessorEmitter()

async function convertFiles (files, argv, options, verbose) {
  for (const file of files) {
    if (verbose) {
      console.log(`converting file ${file}`)
    }
    //await converter.convert(processor, file, options, argv.timings)
    options['backend'] = "revealjs"
    await asciidoctor.convert(file, options, argv.timings)
  }
}

let processing = false
let shouldEmitRequestEvent = false
processorEmitter.on('request', async (files, args, options, verbose, preview) => {
  try {
    // prevent multiprocessing.
    if (!processing) {
      processing = true
      try {
        await convertFiles(files, args, options, verbose, preview)
      } finally {
        processing = false
        if (shouldEmitRequestEvent) {
          shouldEmitRequestEvent = false
          processorEmitter.emit('request', files, args, options, verbose, preview)
        }
      }
    } else {
      shouldEmitRequestEvent = true
    }
  } catch (e) {
    console.log('error', e)
  }
})

class RevealJsInvoker extends Invoker {
  async invoke () {
    const processArgs = this.options.argv.slice(2)
    const { args } = this.options
    const { verbose, version, files } = args

    if (version || (verbose && processArgs.length === 1)) {
      process.stdout.write(`Asciidoctor-Reveal.js ${pkg.version} using `)
      Invoker.printVersion()
      return { exit: true }
    }

    // Register the reveal.js converter
    asciidoctorRevealjs.register()

    //converter.registerTemplateConverter(processor, templates)
    Invoker.prepareProcessor(args, processor)
    const options = this.options.options
    if (files && files.length > 0) {
      await convertFiles(files, args, options, verbose)
      return { exit: true }
    } else {
      this.showHelp()
      return { exit: true }
    }
  }
}


//const { PdfOptions, PdfInvoker } = require('../lib/cli.js')

;(async () => {
//  const options = new RevealJsOptions().parse(process.argv)
  //return new RevealJsInvoker(options).invoke()
  const options = new Options().parse(process.argv)
  return new RevealJsInvoker(options).invoke()
})()
.then((result) => {
  if (result.exit) {
    process.exit(0)
  }
})
.catch((error) => {
  console.log('error', error)
  process.exit(1)
})

/*
const fs = require('fs');
const log = require('bestikk-log');

const examplesDir = 'examples';

log.task('examples');

// Load asciidoctor.js and local asciidoctor-reveal.js
const asciidoctor = require('@asciidoctor/core')();
const asciidoctorRevealjs = require('../build/asciidoctor-reveal.js');

// Register the reveal.js converter
asciidoctorRevealjs.register()

// Convert *a* document using the reveal.js converter
var attributes = {'revealjsdir': 'reveal.js'};
var options = {safe: 'safe', backend: 'revealjs', attributes: attributes, to_dir: examplesDir};

fs.readdir(examplesDir, (err, files) => {
  files.forEach(function (filename) {
    if (path.extname(filename) === '.adoc') {
      try {
        asciidoctor.convertFile(path.join(examplesDir, filename), options);
        log.info(`Successfully converted ${filename}`);
      }
      catch (err) {
        log.error(`Error converting ${filename}: ${err}`);
      }
    }
  });
});
*/
